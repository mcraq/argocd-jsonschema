{
  "type": "object",
  "properties": {
    "requiredDuringSchedulingIgnoredDuringExecution": {
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "nodeSelectorTerms": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "matchExpressions": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "key": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "The label key that the selector applies to."
                    },
                    "operator": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                    },
                    "values": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "title": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.\n+optional"
                    }
                  },
                  "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values."
                },
                "title": "A list of node selector requirements by node's labels.\n+optional"
              },
              "matchFields": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "key": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "The label key that the selector applies to."
                    },
                    "operator": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                    },
                    "values": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "title": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.\n+optional"
                    }
                  },
                  "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values."
                },
                "title": "A list of node selector requirements by node's fields.\n+optional"
              }
            },
            "title": "A null or empty node selector term matches no objects. The requirements of\nthem are ANDed.\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\n+structType=atomic"
          },
          "description": "Required. A list of node selector terms. The terms are ORed."
        }
      },
      "title": "A node selector represents the union of the results of one or more label queries\nover a set of nodes; that is, it represents the OR of the selectors represented\nby the node selector terms.\n+structType=atomic"
    },
    "preferredDuringSchedulingIgnoredDuringExecution": {
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "weight": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100."
          },
          "preference": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "matchExpressions": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "key": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "The label key that the selector applies to."
                    },
                    "operator": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                    },
                    "values": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "title": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.\n+optional"
                    }
                  },
                  "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values."
                },
                "title": "A list of node selector requirements by node's labels.\n+optional"
              },
              "matchFields": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "key": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "The label key that the selector applies to."
                    },
                    "operator": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                    },
                    "values": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "title": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.\n+optional"
                    }
                  },
                  "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values."
                },
                "title": "A list of node selector requirements by node's fields.\n+optional"
              }
            },
            "title": "A null or empty node selector term matches no objects. The requirements of\nthem are ANDed.\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\n+structType=atomic"
          }
        },
        "description": "An empty preferred scheduling term matches all objects with implicit weight 0\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op)."
      },
      "title": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.\n+optional"
    }
  },
  "description": "Node affinity is a group of node affinity scheduling rules.",
  "$schema": "http://json-schema.org/schema#"
}