{
  "type": "object",
  "properties": {
    "name": {
      "type": [
        "string",
        "null"
      ],
      "description": "Name of the environment variable. Must be a C_IDENTIFIER."
    },
    "value": {
      "type": [
        "string",
        "null"
      ],
      "title": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".\n+optional"
    },
    "valueFrom": {
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "fieldRef": {
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "apiVersion": {
              "type": [
                "string",
                "null"
              ],
              "title": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n+optional"
            },
            "fieldPath": {
              "type": [
                "string",
                "null"
              ],
              "description": "Path of the field to select in the specified API version."
            }
          },
          "title": "ObjectFieldSelector selects an APIVersioned field of an object.\n+structType=atomic"
        },
        "resourceFieldRef": {
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "containerName": {
              "type": [
                "string",
                "null"
              ],
              "title": "Container name: required for volumes, optional for env vars\n+optional"
            },
            "resource": {
              "type": [
                "string",
                "null"
              ],
              "title": "Required: resource to select"
            },
            "divisor": {
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "string": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "description": "Quantity is a fixed-point representation of a number.\nIt provides convenient marshaling/unmarshaling in JSON and YAML,\nin addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n```\n<quantity>        ::= <signedNumber><suffix>\n\n\t(Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n\n<digit>           ::= 0 | 1 | ... | 9\n<digits>          ::= <digit> | <digit><digits>\n<number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits>\n<sign>            ::= \"+\" | \"-\"\n<signedNumber>    ::= <number> | <sign><number>\n<suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI>\n<binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n\n\t(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n\n\t(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n```\n\nNo matter which of the three exponent forms is used, no quantity may represent\na number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal\nplaces. Numbers larger or more precise will be capped or rounded up.\n(E.g.: 0.1m will rounded up to 1m.)\nThis may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix\nit had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\".\nThis means that Exponent/suffix will be adjusted up or down (with a\ncorresponding increase or decrease in Mantissa) such that:\n\n- No precision is lost\n- No fractional digits will be emitted\n- The exponent (or suffix) is as large as possible.\n\nThe sign will be omitted unless the number is negative.\n\nExamples:\n\n- 1.5 will be serialized as \"1500m\"\n- 1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a\nfloating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed,\nbut will be re-emitted in their canonical form. (So always use canonical\nform, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without\nwriting some sort of special handling code in the hopes that that will\ncause implementors to also use a fixed point implementation.\n\n+protobuf=true\n+protobuf.embed=string\n+protobuf.options.marshal=false\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:deepcopy-gen=true\n+k8s:openapi-gen=true"
            }
          },
          "title": "ResourceFieldSelector represents container resources (cpu, memory) and their output format\n+structType=atomic"
        },
        "configMapKeyRef": {
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "localObjectReference": {
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "name": {
                  "type": [
                    "string",
                    "null"
                  ],
                  "title": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional"
                }
              },
              "title": "LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.\n+structType=atomic"
            },
            "key": {
              "type": [
                "string",
                "null"
              ],
              "description": "The key to select."
            },
            "optional": {
              "type": [
                "boolean",
                "null"
              ],
              "title": "Specify whether the ConfigMap or its key must be defined\n+optional"
            }
          },
          "title": "Selects a key from a ConfigMap.\n+structType=atomic"
        },
        "secretKeyRef": {
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "localObjectReference": {
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "name": {
                  "type": [
                    "string",
                    "null"
                  ],
                  "title": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional"
                }
              },
              "title": "LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.\n+structType=atomic"
            },
            "key": {
              "type": [
                "string",
                "null"
              ],
              "description": "The key of the secret to select from.  Must be a valid secret key."
            },
            "optional": {
              "type": [
                "boolean",
                "null"
              ],
              "title": "Specify whether the Secret or its key must be defined\n+optional"
            }
          },
          "title": "SecretKeySelector selects a key of a Secret.\n+structType=atomic"
        }
      },
      "description": "EnvVarSource represents a source for the value of an EnvVar."
    }
  },
  "description": "EnvVar represents an environment variable present in a Container.",
  "$schema": "http://json-schema.org/schema#"
}