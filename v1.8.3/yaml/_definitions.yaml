definitions:
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.ALBStatus:
    type: object
    properties:
      loadBalancer:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AwsResourceRef'
      canaryTargetGroup:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AwsResourceRef'
      stableTargetGroup:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AwsResourceRef'
      ingress:
        type: string
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.ALBTrafficRouting:
    type: object
    properties:
      ingress:
        type: string
        title: Ingress refers to the name of an `Ingress` resource in the same namespace as the `Rollout`
      servicePort:
        type: integer
        format: int32
        title: ServicePort refers to the port that the Ingress action should route traffic to
      rootService:
        type: string
        title: RootService references the service in the ingress to the controller should add the action to
      annotationPrefix:
        type: string
        title: |-
          AnnotationPrefix has to match the configured annotation prefix on the alb ingress controller
          +optional
      stickinessConfig:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.StickinessConfig'
        title: |-
          StickinessConfig refers to the duration-based stickiness of the target groups associated with an `Ingress`
          +optional
      ingresses:
        type: array
        items:
          type: string
        title: |-
          Ingresses refers to the name of an `Ingress` resource in the same namespace as the `Rollout` in a multi ingress scenario
          +optional
    title: ALBTrafficRouting configuration for ALB ingress controller to control traffic routing
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AmbassadorTrafficRouting:
    type: object
    properties:
      mappings:
        type: array
        items:
          type: string
        title: |-
          Mappings refer to the name of the Ambassador Mappings used to route traffic to the
          service
    title: |-
      AmbassadorTrafficRouting defines the configuration required to use Ambassador as traffic
      router
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AnalysisRunArgument:
    type: object
    properties:
      name:
        type: string
        title: Name argument name
      value:
        type: string
        title: Value a hardcoded value for the argument. This field is a one of field with valueFrom
      valueFrom:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.ArgumentValueFrom'
        title: ValueFrom A reference to where the value is stored. This field is a one of field with valueFrom
    title: AnalysisRunArgument argument to add to analysisRun
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AnalysisRunMetadata:
    type: object
    properties:
      labels:
        type: object
        additionalProperties:
          type: string
        title: |-
          Labels Additional labels to add to the AnalysisRun
          +optional
      annotations:
        type: object
        additionalProperties:
          type: string
        title: |-
          Annotations additional annotations to add to the AnalysisRun
          +optional
    title: AnalysisRunMetadata extra labels to add to the AnalysisRun
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AnalysisRunSpec:
    type: object
    properties:
      metrics:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.Metric'
        title: |-
          Metrics contains the list of metrics to query as part of an analysis run
          +patchMergeKey=name
          +patchStrategy=merge
      args:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.Argument'
        title: |-
          Args are the list of arguments used in this run
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
      terminate:
        type: boolean
        title: Terminate is used to prematurely stop the run (e.g. rollout completed and analysis is no longer desired)
      dryRun:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.DryRun'
        title: |-
          DryRun object contains the settings for running the analysis in Dry-Run mode
          +patchMergeKey=metricName
          +patchStrategy=merge
          +optional
      measurementRetention:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.MeasurementRetention'
        title: |-
          MeasurementRetention object contains the settings for retaining the number of measurements during the analysis
          +patchMergeKey=metricName
          +patchStrategy=merge
          +optional
      ttlStrategy:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.TTLStrategy'
        title: |-
          TTLStrategy object contains the strategy for the time to live depending on if the analysis succeeded or failed
          +optional
    title: AnalysisRunSpec is the spec for a AnalysisRun resource
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AnalysisRunStatus:
    type: object
    properties:
      phase:
        type: string
        title: Phase is the status of the analysis run
      message:
        type: string
        title: Message is a message explaining current status
      metricResults:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.MetricResult'
        title: MetricResults contains the metrics collected during the run
      startedAt:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        title: StartedAt indicates when the analysisRun first started
      runSummary:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RunSummary'
        title: RunSummary contains the final results from the metric executions
      dryRunSummary:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RunSummary'
        title: DryRunSummary contains the final results from the metric executions in the dry-run mode
      completedAt:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        title: CompletedAt indicates when the analysisRun completed
    title: AnalysisRunStatus is the status for a AnalysisRun resource
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AnalysisRunStrategy:
    type: object
    properties:
      successfulRunHistoryLimit:
        type: integer
        format: int32
        title: SuccessfulRunHistoryLimit limits the number of old successful analysis runs and experiments to be retained in a history
      unsuccessfulRunHistoryLimit:
        type: integer
        format: int32
        title: |-
          UnsuccessfulRunHistoryLimit limits the number of old unsuccessful analysis runs and experiments to be retained in a history.
          Stages for unsuccessful: "Error", "Failed", "Inconclusive"
    title: AnalysisRunStrategy configuration for the analysis runs and experiments to retain
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AnalysisTemplateRef:
    type: object
    properties:
      templateName:
        type: string
        title: |-
          TemplateName name of template to use in AnalysisRun
          +optional
      clusterScope:
        type: boolean
        title: |-
          Whether to look for the templateName at cluster scope or namespace scope
          +optional
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AntiAffinity:
    type: object
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.PreferredDuringSchedulingIgnoredDuringExecution'
        title: +optional
      requiredDuringSchedulingIgnoredDuringExecution:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RequiredDuringSchedulingIgnoredDuringExecution'
        title: +optional
    title: AntiAffinity defines which inter-pod scheduling rule to use for anti-affinity injection
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.ApisixRoute:
    type: object
    properties:
      name:
        type: string
        title: Name refer to the name of the APISIX Route used to route traffic to the service
      rules:
        type: array
        items:
          type: string
        title: RuleRef a list of the APISIX Route HTTP Rules used to route traffic to the service
    title: ApisixRoute holds information on the APISIX Route the rollout needs to modify
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.ApisixTrafficRouting:
    type: object
    properties:
      route:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.ApisixRoute'
        title: Route references an Apisix Route to modify to shape traffic
    title: ApisixTrafficRouting defines the configuration required to use APISIX as traffic router
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AppMeshTrafficRouting:
    type: object
    properties:
      virtualService:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AppMeshVirtualService'
        title: VirtualService references an AppMesh VirtualService and VirtualRouter to modify to shape traffic
      virtualNodeGroup:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AppMeshVirtualNodeGroup'
        title: VirtualNodeGroup references an AppMesh Route targets that are formed by a set of VirtualNodes that are used to shape traffic
    title: AppMeshTrafficRouting configuration for AWS AppMesh service mesh to enable fine grain configuration
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AppMeshVirtualNodeGroup:
    type: object
    properties:
      canaryVirtualNodeRef:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AppMeshVirtualNodeReference'
        title: CanaryVirtualNodeRef is the virtual node ref to modify labels with canary ReplicaSet pod template hash value
      stableVirtualNodeRef:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AppMeshVirtualNodeReference'
        title: StableVirtualNodeRef is the virtual node name to modify labels with stable ReplicaSet pod template hash value
    title: AppMeshVirtualNodeGroup holds information about targets used for routing traffic to a virtual service
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AppMeshVirtualNodeReference:
    type: object
    properties:
      name:
        type: string
        title: Name is the name of VirtualNode CR
    title: AppMeshVirtualNodeReference holds a reference to VirtualNode.appmesh.k8s.aws
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AppMeshVirtualService:
    type: object
    properties:
      name:
        type: string
        title: Name is the name of virtual service
      routes:
        type: array
        items:
          type: string
        description: Routes is list of HTTP routes within virtual router associated with virtual service to edit. If omitted, virtual service must have a single route of this type.
    title: AppMeshVirtualService holds information on the virtual service the rollout needs to modify
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.Argument:
    type: object
    properties:
      name:
        type: string
        title: Name is the name of the argument
      value:
        type: string
        title: |-
          Value is the value of the argument
          +optional
      valueFrom:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.ValueFrom'
        title: |-
          ValueFrom is a reference to where a secret is stored. This field is one of the fields with valueFrom
          +optional
    title: Argument is an argument to an AnalysisRun
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.ArgumentValueFrom:
    type: object
    properties:
      podTemplateHashValue:
        type: string
        title: PodTemplateHashValue gets the value from one of the children ReplicaSet's Pod Template Hash
      fieldRef:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.FieldRef'
        title: FieldRef
    title: ArgumentValueFrom defines references to fields within resources to grab for the value (i.e. Pod Template Hash)
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.Authentication:
    type: object
    properties:
      sigv4:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.Sigv4Config'
        title: |-
          Sigv4 Config is the aws SigV4 configuration to use for SigV4 signing if using Amazon Managed Prometheus
          +optional
      oauth2:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.OAuth2Config'
        title: |-
          OAuth2 config
          +optional
    title: Authentication method
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AwsResourceRef:
    type: object
    properties:
      name:
        type: string
      arn:
        type: string
      fullName:
        type: string
        title: |-
          FullName is the full name of the resource
          +optional
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.BlueGreenStatus:
    type: object
    properties:
      previewSelector:
        type: string
        title: |-
          PreviewSelector indicates which replicas set the preview service is serving traffic to
          +optional
      activeSelector:
        type: string
        title: |-
          ActiveSelector indicates which replicas set the active service is serving traffic to
          +optional
      scaleUpPreviewCheckPoint:
        type: boolean
        title: |-
          ScaleUpPreviewCheckPoint indicates that the Replicaset receiving traffic from the preview service is ready to be scaled up after the rollout is unpaused
          +optional
      prePromotionAnalysisRunStatus:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutAnalysisRunStatus'
        title: PrePromotionAnalysisRunStatus indicates the status of the current prepromotion analysis run
      postPromotionAnalysisRunStatus:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutAnalysisRunStatus'
        title: PostPromotionAnalysisRunStatus indicates the status of the current post promotion analysis run
    title: BlueGreenStatus status fields that only pertain to the blueGreen rollout
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.BlueGreenStrategy:
    type: object
    properties:
      activeService:
        type: string
        description: Name of the service that the rollout modifies as the active service.
      previewService:
        type: string
        title: |-
          Name of the service that the rollout modifies as the preview service.
          +optional
      previewReplicaCount:
        type: integer
        format: int32
        title: |-
          PreviewReplicaCount is the number of replicas to run for the preview stack before the
          switchover. Once the rollout is resumed the desired replicaset will be full scaled up before the switch occurs
          +optional
      autoPromotionEnabled:
        type: boolean
        title: |-
          AutoPromotionEnabled indicates if the rollout should automatically promote the new ReplicaSet
          to the active service or enter a paused state. If not specified, the default value is true.
          +optional
      autoPromotionSeconds:
        type: integer
        format: int32
        title: |-
          AutoPromotionSeconds is a duration in seconds in which to delay auto-promotion (default: 0).
          The countdown begins after the preview ReplicaSet have reached full availability.
          This option is ignored if autoPromotionEnabled is set to false.
          +optional
      maxUnavailable:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.util.intstr.IntOrString'
        title: |-
          MaxUnavailable The maximum number of pods that can be unavailable during a restart operation.
          Defaults to 25% of total replicas.
          +optional
      scaleDownDelaySeconds:
        type: integer
        format: int32
        title: |-
          ScaleDownDelaySeconds adds a delay before scaling down the previous replicaset.
          If omitted, the Rollout waits 30 seconds before scaling down the previous ReplicaSet.
          A minimum of 30 seconds is recommended to ensure IP table propagation across the nodes in
          a cluster. See https://github.com/argoproj/argo-rollouts/issues/19#issuecomment-476329960 for
          more information
          +optional
      scaleDownDelayRevisionLimit:
        type: integer
        format: int32
        title: |-
          ScaleDownDelayRevisionLimit limits the number of old RS that can run at one time before getting scaled down
          +optional
      prePromotionAnalysis:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutAnalysis'
        title: PrePromotionAnalysis configuration to run analysis before a selector switch
      antiAffinity:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AntiAffinity'
        title: |-
          AntiAffinity enables anti-affinity rules for Blue Green deployment
          +optional
      postPromotionAnalysis:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutAnalysis'
        title: PostPromotionAnalysis configuration to run analysis after a selector switch
      previewMetadata:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.PodTemplateMetadata'
        title: |-
          PreviewMetadata specify labels and annotations which will be attached to the preview pods for
          the duration which they act as a preview pod, and will be removed after
      activeMetadata:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.PodTemplateMetadata'
        title: |-
          ActiveMetadata specify labels and annotations which will be attached to the active pods for
          the duration which they act as a active pod, and will be removed after
      abortScaleDownDelaySeconds:
        type: integer
        format: int32
        title: |-
          AbortScaleDownDelaySeconds adds a delay in second before scaling down the preview replicaset
          if update is aborted. 0 means not to scale down.
          Default is 30 second
          +optional
    title: BlueGreenStrategy defines parameters for Blue Green deployment
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.CanaryStatus:
    type: object
    properties:
      currentStepAnalysisRunStatus:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutAnalysisRunStatus'
        title: CurrentStepAnalysisRunStatus indicates the status of the current step analysis run
      currentBackgroundAnalysisRunStatus:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutAnalysisRunStatus'
        title: CurrentBackgroundAnalysisRunStatus indicates the status of the current background analysis run
      currentExperiment:
        type: string
        title: CurrentExperiment indicates the running experiment
      weights:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.TrafficWeights'
        title: Weights records the weights which have been set on traffic provider. Only valid when using traffic routing
      stablePingPong:
        type: string
        title: StablePingPong For the ping-pong feature holds the current stable service, ping or pong
      stepPluginStatuses:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.StepPluginStatus'
        title: StepPluginStatuses holds the status of the step plugins executed
    title: CanaryStatus status fields that only pertain to the canary rollout
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.CanaryStep:
    type: object
    properties:
      setWeight:
        type: integer
        format: int32
        title: SetWeight sets what percentage of the newRS should receive
      pause:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutPause'
        title: |-
          Pause freezes the rollout by setting spec.Paused to true.
          A Rollout will resume when spec.Paused is reset to false.
          +optional
      experiment:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutExperimentStep'
        title: Experiment defines the experiment object that should be created
      analysis:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutAnalysis'
        title: Analysis defines the AnalysisRun that will run for a step
      setCanaryScale:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.SetCanaryScale'
        title: |-
          SetCanaryScale defines how to scale the newRS without changing traffic weight
          +optional
      setHeaderRoute:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.SetHeaderRoute'
        title: |-
          SetHeaderRoute defines the route with specified header name to send 100% of traffic to the canary service
          +optional
      setMirrorRoute:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.SetMirrorRoute'
        title: |-
          SetMirrorRoutes Mirrors traffic that matches rules to a particular destination
          +optional
      plugin:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.PluginStep'
        title: Plugin defines a plugin to execute for a step
    description: CanaryStep defines a step of a canary deployment.
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.CanaryStrategy:
    type: object
    properties:
      canaryService:
        type: string
        title: |-
          CanaryService holds the name of a service which selects pods with canary version and don't select any pods with stable version.
          +optional
      stableService:
        type: string
        title: |-
          StableService holds the name of a service which selects pods with stable version and don't select any pods with canary version.
          +optional
      steps:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.CanaryStep'
        title: |-
          Steps define the order of phases to execute the canary deployment
          +optional
      trafficRouting:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutTrafficRouting'
        title: TrafficRouting hosts all the supported service meshes supported to enable more fine-grained traffic routing
      maxUnavailable:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.util.intstr.IntOrString'
        title: |-
          MaxUnavailable The maximum number of pods that can be unavailable during the update.
          Value can be an absolute number (ex: 5) or a percentage of total pods at the start of update (ex: 10%).
          Absolute number is calculated from percentage by rounding down.
          This can not be 0 if MaxSurge is 0.
          By default, a fixed value of 25% is used.
          Example: when this is set to 30%, the old RC can be scaled down by 30%
          immediately when the rolling update starts. Once new pods are ready, old RC
          can be scaled down further, followed by scaling up the new RC, ensuring
          that at least 70% of original number of pods are available at all times
          during the update.
          +optional
      maxSurge:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.util.intstr.IntOrString'
        title: |-
          MaxSurge The maximum number of pods that can be scheduled above the original number of
          pods.
          Value can be an absolute number (ex: 5) or a percentage of total pods at
          the start of the update (ex: 10%). This can not be 0 if MaxUnavailable is 0.
          Absolute number is calculated from percentage by rounding up.
          By default, a value of 25% is used.
          Example: when this is set to 30%, the new RC can be scaled up by 30%
          immediately when the rolling update starts. Once old pods have been killed,
          new RC can be scaled up further, ensuring that total number of pods running
          at any time during the update is at most 130% of original pods.
          +optional
      analysis:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutAnalysisBackground'
        title: Analysis runs a separate analysisRun while all the steps execute. This is intended to be a continuous validation of the new ReplicaSet
      antiAffinity:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AntiAffinity'
        title: |-
          AntiAffinity enables anti-affinity rules for Canary deployment
          +optional
      canaryMetadata:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.PodTemplateMetadata'
        title: |-
          CanaryMetadata specify labels and annotations which will be attached to the canary pods for
          the duration which they act as a canary, and will be removed after
      stableMetadata:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.PodTemplateMetadata'
        title: |-
          StableMetadata specify labels and annotations which will be attached to the stable pods for
          the duration which they act as a canary, and will be removed after
      scaleDownDelaySeconds:
        type: integer
        format: int32
        title: |-
          ScaleDownDelaySeconds adds a delay before scaling down the previous ReplicaSet when the
          canary strategy is used with traffic routing (default 30 seconds). A delay in scaling down
          the previous ReplicaSet is needed after switching the stable service selector to point to
          the new ReplicaSet, in order to give time for traffic providers to re-target the new pods.
          This value is ignored with basic, replica-weighted canary without traffic routing.
          +optional
      scaleDownDelayRevisionLimit:
        type: integer
        format: int32
        title: |-
          ScaleDownDelayRevisionLimit limits the number of old RS that can run at one time before getting scaled down
          +optional
      abortScaleDownDelaySeconds:
        type: integer
        format: int32
        title: |-
          AbortScaleDownDelaySeconds adds a delay in second before scaling down the canary pods when update
          is aborted for canary strategy with traffic routing (not applicable for basic canary).
          0 means canary pods are not scaled down.
          Default is 30 seconds.
          +optional
      dynamicStableScale:
        type: boolean
        description: |-
          DynamicStableScale is a traffic routing feature which dynamically scales the stable
          ReplicaSet to minimize total pods which are running during an update. This is calculated by
          scaling down the stable as traffic is increased to canary. When disabled (the default behavior)
          the stable ReplicaSet remains fully scaled to support instantaneous aborts.
      pingPong:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.PingPongSpec'
        title: PingPongSpec holds the ping and pong services
      minPodsPerReplicaSet:
        type: integer
        format: int32
        title: |-
          Assuming the desired number of pods in a stable or canary ReplicaSet is not zero, then make sure it is at least
          MinPodsPerReplicaSet for High Availability. Only applicable for TrafficRoutedCanary
    title: CanaryStrategy defines parameters for a Replica Based Canary
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.CloudWatchMetric:
    type: object
    properties:
      interval:
        type: string
      metricDataQueries:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.CloudWatchMetricDataQuery'
    title: CloudWatchMetric defines the cloudwatch query to perform canary analysis
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.CloudWatchMetricDataQuery:
    type: object
    properties:
      id:
        type: string
      expression:
        type: string
      label:
        type: string
      metricStat:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.CloudWatchMetricStat'
      period:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.util.intstr.IntOrString'
      returnData:
        type: boolean
    title: CloudWatchMetricDataQuery defines the cloudwatch query
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.CloudWatchMetricStat:
    type: object
    properties:
      metric:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.CloudWatchMetricStatMetric'
      period:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.util.intstr.IntOrString'
      stat:
        type: string
      unit:
        type: string
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.CloudWatchMetricStatMetric:
    type: object
    properties:
      dimensions:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.CloudWatchMetricStatMetricDimension'
      metricName:
        type: string
      namespace:
        type: string
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.CloudWatchMetricStatMetricDimension:
    type: object
    properties:
      name:
        type: string
      value:
        type: string
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.DatadogMetric:
    type: object
    properties:
      interval:
        type: string
        description: |-
          +kubebuilder:default="5m"
          Interval refers to the Interval time window in Datadog (default: 5m). Not to be confused with the polling rate for the metric.
      query:
        type: string
      queries:
        type: object
        additionalProperties:
          type: string
        title: |-
          Queries is a map of query_name_as_key: query. You can then use query_name_as_key inside Formula.Used for v2
          +kubebuilder:validation:Type=object
      formula:
        type: string
        title: Formula refers to the Formula made up of the queries. Only useful with Queries. Used for v2
      apiVersion:
        type: string
        title: |-
          ApiVersion refers to the Datadog API version being used (default: v1). v1 will eventually be deprecated.
          +kubebuilder:validation:Enum=v1;v2
          +kubebuilder:default=v1
      aggregator:
        type: string
        title: |-
          +kubebuilder:validation:Enum=avg;min;max;sum;last;percentile;mean;l2norm;area
          Aggregator is a type of aggregator to use for metrics-based queries (default: ""). Used for v2
      secretRef:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.SecretRef'
        title: |-
          Secret refers to the name of the secret that should be used for an analysis and should exists in the namespace where the controller is.
          +optional
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.DryRun:
    type: object
    properties:
      metricName:
        type: string
        description: |-
          Name of the metric which needs to be evaluated in the Dry-Run mode. Wildcard '*' is supported and denotes all
          the available metrics.
    description: DryRun defines the settings for running the analysis in Dry-Run mode.
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.FieldRef:
    type: object
    properties:
      fieldPath:
        type: string
        title: 'Required: Path of the field to select in the specified API version'
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.GraphiteMetric:
    type: object
    properties:
      address:
        type: string
        title: Address is the HTTP address and port of the Graphite server
      query:
        type: string
        title: Query is a raw Graphite query to perform
    title: GraphiteMetric defines the Graphite query to perform canary analysis
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.HeaderRoutingMatch:
    type: object
    properties:
      headerName:
        type: string
        title: HeaderName the name of the request header
      headerValue:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.StringMatch'
        title: HeaderValue the value of the header
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.InfluxdbMetric:
    type: object
    properties:
      profile:
        type: string
        title: Profile is the name of the secret holding InfluxDB account configuration
      query:
        type: string
        title: Query is a raw InfluxDB flux query to perform
    title: InfluxdbMetric defines the InfluxDB Flux query to perform canary analysis
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.IstioDestinationRule:
    type: object
    properties:
      name:
        type: string
        title: Name holds the name of the DestinationRule
      canarySubsetName:
        type: string
        title: CanarySubsetName is the subset name to modify labels with canary ReplicaSet pod template hash value
      stableSubsetName:
        type: string
        title: StableSubsetName is the subset name to modify labels with stable ReplicaSet pod template hash value
    title: IstioDestinationRule is a reference to an Istio DestinationRule to modify and shape traffic
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.IstioTrafficRouting:
    type: object
    properties:
      virtualService:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.IstioVirtualService'
        title: VirtualService references an Istio VirtualService to modify to shape traffic
      destinationRule:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.IstioDestinationRule'
        title: DestinationRule references an Istio DestinationRule to modify to shape traffic
      virtualServices:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.IstioVirtualService'
        title: VirtualServices references a list of Istio VirtualService to modify to shape traffic
    title: IstioTrafficRouting configuration for Istio service mesh to enable fine grain configuration
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.IstioVirtualService:
    type: object
    properties:
      name:
        type: string
        title: Name holds the name of the VirtualService
      routes:
        type: array
        items:
          type: string
        description: A list of HTTP routes within VirtualService to edit. If omitted, VirtualService must have a single route of this type.
      tlsRoutes:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.TLSRoute'
        description: A list of TLS/HTTPS routes within VirtualService to edit. If omitted, VirtualService must have a single route of this type.
      tcpRoutes:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.TCPRoute'
        description: A list of TCP routes within VirtualService to edit. If omitted, VirtualService must have a single route of this type.
    title: IstioVirtualService holds information on the virtual service the rollout needs to modify
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.JobMetric:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
      spec:
        $ref: '#/definitions/k8s.io.api.batch.v1.JobSpec'
    title: JobMetric defines a job to run which acts as a metric
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.KayentaMetric:
    type: object
    properties:
      address:
        type: string
      application:
        type: string
      canaryConfigName:
        type: string
      metricsAccountName:
        type: string
      configurationAccountName:
        type: string
      storageAccountName:
        type: string
      threshold:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.KayentaThreshold'
      scopes:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.KayentaScope'
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.KayentaScope:
    type: object
    properties:
      name:
        type: string
      controlScope:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.ScopeDetail'
      experimentScope:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.ScopeDetail'
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.KayentaThreshold:
    type: object
    properties:
      pass:
        type: string
        format: int64
      marginal:
        type: string
        format: int64
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.MangedRoutes:
    type: object
    properties:
      name:
        type: string
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.Measurement:
    type: object
    properties:
      phase:
        type: string
        title: Phase is the status of this single measurement
      message:
        type: string
        title: Message contains a message describing current condition (e.g. error messages)
      startedAt:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        title: StartedAt is the timestamp in which this measurement started to be measured
      finishedAt:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        title: FinishedAt is the timestamp in which this measurement completed and value was collected
      value:
        type: string
        title: Value is the measured value of the metric
      metadata:
        type: object
        additionalProperties:
          type: string
        title: |-
          Metadata stores additional metadata about this metric result, used by the different providers
          (e.g. kayenta run ID, job name)
      resumeAt:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        title: ResumeAt is the  timestamp when the analysisRun should try to resume the measurement
    title: Measurement is a point in time result value of a single metric, and the time it was measured
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.MeasurementRetention:
    type: object
    properties:
      metricName:
        type: string
        description: MetricName is the name of the metric on which this retention policy should be applied.
      limit:
        type: integer
        format: int32
        description: Limit is the maximum number of measurements to be retained for this given metric.
    description: MeasurementRetention defines the settings for retaining the number of measurements during the analysis.
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.Metric:
    type: object
    properties:
      name:
        type: string
        title: Name is the name of the metric
      interval:
        type: string
        title: |-
          Interval defines an interval string (e.g. 30s, 5m, 1h) between each measurement.
          If omitted, will perform a single measurement
      initialDelay:
        type: string
        title: InitialDelay how long the AnalysisRun should wait before starting this metric
      count:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.util.intstr.IntOrString'
        description: |-
          Count is the number of times to run the measurement. If both interval and count are omitted,
          the effective count is 1. If only interval is specified, metric runs indefinitely.
          If count > 1, interval must be specified.
      successCondition:
        type: string
        title: |-
          SuccessCondition is an expression which determines if a measurement is considered successful
          Expression is a goevaluate expression. The keyword `result` is a variable reference to the
          value of measurement. Results can be both structured data or primitive.
          Examples:
            result > 10
            (result.requests_made * result.requests_succeeded / 100) >= 90
      failureCondition:
        type: string
        title: |-
          FailureCondition is an expression which determines if a measurement is considered failed
          If both success and failure conditions are specified, and the measurement does not fall into
          either condition, the measurement is considered Inconclusive
      failureLimit:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.util.intstr.IntOrString'
        title: |-
          FailureLimit is the maximum number of times the measurement is allowed to fail, before the
          entire metric is considered Failed (default: 0)
          -1 for making it disabled (when opting to use ConsecutiveSuccessLimit solely)
      inconclusiveLimit:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.util.intstr.IntOrString'
        title: |-
          InconclusiveLimit is the maximum number of times the measurement is allowed to measure
          Inconclusive, before the entire metric is considered Inconclusive (default: 0)
      consecutiveErrorLimit:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.util.intstr.IntOrString'
        title: |-
          ConsecutiveErrorLimit is the maximum number of times the measurement is allowed to error in
          succession, before the metric is considered error (default: 4)
      provider:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.MetricProvider'
        title: Provider configuration to the external system to use to verify the analysis
      consecutiveSuccessLimit:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.util.intstr.IntOrString'
        title: |-
          ConsecutiveSuccessLimit is the number of consecutive times the measurement must succeed for the
          entire metric to be considered Successful (default: 0, which means it's disabled)
    title: Metric defines a metric in which to perform analysis
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.MetricProvider:
    type: object
    properties:
      prometheus:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.PrometheusMetric'
        title: Prometheus specifies the prometheus metric to query
      kayenta:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.KayentaMetric'
        title: Kayenta specifies a Kayenta metric
      web:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.WebMetric'
        title: Web specifies a generic HTTP web metric
      datadog:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.DatadogMetric'
        title: Datadog specifies a datadog metric to query
      wavefront:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.WavefrontMetric'
        title: Wavefront specifies the wavefront metric to query
      newRelic:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.NewRelicMetric'
        title: NewRelic specifies the newrelic metric to query
      job:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.JobMetric'
        title: Job specifies the job metric run
      cloudWatch:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.CloudWatchMetric'
        title: CloudWatch specifies the cloudWatch metric to query
      graphite:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.GraphiteMetric'
        title: Graphite specifies the Graphite metric to query
      influxdb:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.InfluxdbMetric'
        title: Influxdb specifies the influxdb metric to query
      skywalking:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.SkyWalkingMetric'
        title: SkyWalking specifies the skywalking metric to query
      plugin:
        type: object
        additionalProperties:
          type: string
          format: byte
        title: |-
          +kubebuilder:validation:Schemaless
          +kubebuilder:pruning:PreserveUnknownFields
          +kubebuilder:validation:Type=object
          Plugin specifies the hashicorp go-plugin metric to query
    title: |-
      MetricProvider which external system to use to verify the analysis
      Only one of the fields in this struct should be non-nil
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.MetricResult:
    type: object
    properties:
      name:
        type: string
        title: Name is the name of the metric
      phase:
        type: string
        title: Phase is the overall aggregate status of the metric
      measurements:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.Measurement'
        title: Measurements holds the most recent measurements collected for the metric
      message:
        type: string
        title: Message contains a message describing current condition (e.g. error messages)
      count:
        type: integer
        format: int32
        title: |-
          Count is the number of times the metric was measured without Error
          This is equal to the sum of Successful, Failed, Inconclusive
      successful:
        type: integer
        format: int32
        title: Successful is the number of times the metric was measured Successful
      failed:
        type: integer
        format: int32
        title: Failed is the number of times the metric was measured Failed
      inconclusive:
        type: integer
        format: int32
        title: Inconclusive is the number of times the metric was measured Inconclusive
      error:
        type: integer
        format: int32
        title: Error is the number of times an error was encountered during measurement
      consecutiveError:
        type: integer
        format: int32
        title: |-
          ConsecutiveError is the number of times an error was encountered during measurement in succession
          Resets to zero when non-errors are encountered
      dryRun:
        type: boolean
        title: DryRun indicates whether this metric is running in a dry-run mode or not
      metadata:
        type: object
        additionalProperties:
          type: string
        description: |-
          Metadata stores additional metadata about this metric. It is used by different providers to store
          the final state which gets used while taking measurements. For example, Prometheus uses this field
          to store the final resolved query after substituting the template arguments.
      consecutiveSuccess:
        type: integer
        format: int32
        title: |-
          ConsecutiveSuccess is the number of times a measurement was successful in succession
          Resets to zero when failures, inconclusive measurements, or errors are encountered
    title: |-
      MetricResult contain a list of the most recent measurements for a single metric along with
      counters on how often the measurement
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.NewRelicMetric:
    type: object
    properties:
      profile:
        type: string
        title: Profile is the name of the secret holding NR account configuration
      query:
        type: string
        title: Query is a raw newrelic NRQL query to perform
      timeout:
        type: string
        format: int64
        title: |-
          Timeout represents the duration limit in seconds that will apply to the NRQL query
          +optional
    title: NewRelicMetric defines the newrelic query to perform canary analysis
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.NginxTrafficRouting:
    type: object
    properties:
      annotationPrefix:
        type: string
        title: |-
          AnnotationPrefix has to match the configured annotation prefix on the nginx ingress controller
          +optional
      stableIngress:
        type: string
        title: StableIngress refers to the name of an `Ingress` resource in the same namespace as the `Rollout`
      additionalIngressAnnotations:
        type: object
        additionalProperties:
          type: string
        title: +optional
      stableIngresses:
        type: array
        items:
          type: string
        title: |-
          StableIngresses refers to the names of `Ingress` resources in the same namespace as the `Rollout` in a multi ingress scenario
          +optional
      canaryIngressAnnotations:
        type: object
        additionalProperties:
          type: string
        title: +optional
    title: NginxTrafficRouting configuration for Nginx ingress controller to control traffic routing
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.OAuth2Config:
    type: object
    properties:
      tokenUrl:
        type: string
        title: OAuth2 provider token URL
      clientId:
        type: string
        title: OAuth2 client ID
      clientSecret:
        type: string
        title: OAuth2 client secret
      scopes:
        type: array
        items:
          type: string
        title: |-
          OAuth2 scopes
          +optional
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.ObjectRef:
    type: object
    properties:
      apiVersion:
        type: string
        title: API Version of the referent
      kind:
        type: string
        title: Kind of the referent
      name:
        type: string
        title: Name of the referent
      scaleDown:
        type: string
        title: Automatically scale down deployment
    title: ObjectRef holds a references to the Kubernetes object
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.PauseCondition:
    type: object
    properties:
      reason:
        type: string
      startTime:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
    title: PauseCondition the reason for a pause and when it started
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.PingPongSpec:
    type: object
    properties:
      pingService:
        type: string
        title: name of the ping service
      pongService:
        type: string
        title: name of the pong service
    description: PingPongSpec holds the ping and pong service name.
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.PluginStep:
    type: object
    properties:
      name:
        type: string
        title: Name of the hashicorp go-plugin step to query
      config:
        type: string
        format: byte
        title: |-
          +kubebuilder:validation:Schemaless
          +kubebuilder:pruning:PreserveUnknownFields
          +kubebuilder:validation:Type=object
          Config is the configuration object for the specified plugin
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.PodTemplateMetadata:
    type: object
    properties:
      labels:
        type: object
        additionalProperties:
          type: string
        title: |-
          Labels Additional labels to add to the experiment
          +optional
      annotations:
        type: object
        additionalProperties:
          type: string
        title: |-
          Annotations additional annotations to add to the experiment
          +optional
    title: PodTemplateMetadata extra labels to add to the template
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.PreferredDuringSchedulingIgnoredDuringExecution:
    type: object
    properties:
      weight:
        type: integer
        format: int32
        description: Weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
    title: PreferredDuringSchedulingIgnoredDuringExecution defines the weight of the anti-affinity injection
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.PrometheusMetric:
    type: object
    properties:
      address:
        type: string
        title: Address is the HTTP address and port of the prometheus server
      query:
        type: string
        title: Query is a raw prometheus query to perform
      authentication:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.Authentication'
        title: |-
          Authentication details
          +optional
      timeout:
        type: string
        format: int64
        title: |-
          Timeout represents the duration within which a prometheus query should complete. It is expressed in seconds.
          +optional
      insecure:
        type: boolean
        title: Insecure skips host TLS verification
      headers:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.WebMetricHeader'
        title: |-
          Headers are optional HTTP headers to use in the request
          +optional
          +patchMergeKey=key
          +patchStrategy=merge
      rangeQuery:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.PrometheusRangeQueryArgs'
        title: |-
          Arguments for prometheus
          +optional
    title: PrometheusMetric defines the prometheus query to perform canary analysis
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.PrometheusRangeQueryArgs:
    type: object
    properties:
      start:
        type: string
        title: The start time to query in expr format e.g. now(), now() - duration("1h"), now() - duration("{{args.lookback_duration}}")
      end:
        type: string
        title: The end time to query in expr format e.g. now(), now() - duration("1h"), now() - duration("{{args.lookback_duration}}")
      step:
        type: string
        description: The maximum time between two slices from the start to end (e.g. 30s, 5m, 1h).
    title: Arguments to perform a prometheus range query
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RequiredDuringSchedulingIgnoredDuringExecution:
    type: object
    title: RequiredDuringSchedulingIgnoredDuringExecution defines inter-pod scheduling rule to be RequiredDuringSchedulingIgnoredDuringExecution
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RollbackWindowSpec:
    type: object
    properties:
      revisions:
        type: integer
        format: int32
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.Rollout:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
      spec:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutSpec'
      status:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutStatus'
    title: Rollout is a specification for a Rollout resource
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutAnalysis:
    type: object
    properties:
      templates:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AnalysisTemplateRef'
        title: |-
          Templates reference to a list of analysis templates to combine for an AnalysisRun
          +patchMergeKey=templateName
          +patchStrategy=merge
      args:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AnalysisRunArgument'
        title: |-
          Args the arguments that will be added to the AnalysisRuns
          +patchMergeKey=name
          +patchStrategy=merge
      dryRun:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.DryRun'
        title: |-
          DryRun object contains the settings for running the analysis in Dry-Run mode
          +patchMergeKey=metricName
          +patchStrategy=merge
          +optional
      measurementRetention:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.MeasurementRetention'
        title: |-
          MeasurementRetention object contains the settings for retaining the number of measurements during the analysis
          +patchMergeKey=metricName
          +patchStrategy=merge
          +optional
      analysisRunMetadata:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AnalysisRunMetadata'
        title: |-
          AnalysisRunMetadata labels and annotations that will be added to the AnalysisRuns
          +optional
    title: RolloutAnalysis defines a template that is used to create a analysisRun
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutAnalysisBackground:
    type: object
    properties:
      rolloutAnalysis:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutAnalysis'
      startingStep:
        type: integer
        format: int32
        title: |-
          StartingStep indicates which step the background analysis should start on
          If not listed, controller defaults to 0
    title: RolloutAnalysisBackground defines a template that is used to create a background analysisRun
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutAnalysisRunStatus:
    type: object
    properties:
      name:
        type: string
      status:
        type: string
      message:
        type: string
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutCondition:
    type: object
    properties:
      type:
        type: string
        description: Type of deployment condition.
      status:
        type: string
        description: Phase of the condition, one of True, False, Unknown.
      lastUpdateTime:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        description: The last time this condition was updated.
      lastTransitionTime:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time the condition transitioned from one status to another.
      reason:
        type: string
        description: The reason for the condition's last transition.
      message:
        type: string
        description: A human readable message indicating details about the transition.
    description: RolloutCondition describes the state of a rollout at a certain point.
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutExperimentStep:
    type: object
    properties:
      templates:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutExperimentTemplate'
        title: |-
          Templates what templates that should be added to the experiment. Should be non-nil
          +patchMergeKey=name
          +patchStrategy=merge
      duration:
        type: string
        title: |-
          Duration is a duration string (e.g. 30s, 5m, 1h) that the experiment should run for
          +optional
      analyses:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutExperimentStepAnalysisTemplateRef'
        title: |-
          Analyses reference which analysis templates to run with the experiment
          +patchMergeKey=name
          +patchStrategy=merge
      dryRun:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.DryRun'
        title: |-
          DryRun object contains the settings for running the analysis in Dry-Run mode
          +patchMergeKey=metricName
          +patchStrategy=merge
          +optional
      analysisRunMetadata:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AnalysisRunMetadata'
        title: |-
          AnalysisRunMetadata labels and annotations that will be added to the AnalysisRuns
          +optional
    title: RolloutExperimentStep defines a template that is used to create a experiment for a step
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutExperimentStepAnalysisTemplateRef:
    type: object
    properties:
      name:
        type: string
        title: Name is a name for this analysis template invocation
      templateName:
        type: string
        title: TemplateName reference of the AnalysisTemplate name used by the Experiment to create the run
      clusterScope:
        type: boolean
        title: |-
          Whether to look for the templateName at cluster scope or namespace scope
          +optional
      args:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AnalysisRunArgument'
        title: |-
          Args the arguments that will be added to the AnalysisRuns
          +patchMergeKey=name
          +patchStrategy=merge
      requiredForCompletion:
        type: boolean
        title: RequiredForCompletion blocks the Experiment from completing until the analysis has completed
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutExperimentTemplate:
    type: object
    properties:
      name:
        type: string
        title: Name description of template that passed to the template
      specRef:
        type: string
        title: SpecRef indicates where the rollout should get the RS template from
      replicas:
        type: integer
        format: int32
        title: |-
          Replicas replica count for the template
          +optional
      metadata:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.PodTemplateMetadata'
        title: |-
          Metadata sets labels and annotations to use for the RS created from the template
          +optional
      selector:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector'
        title: |-
          Selector overrides the selector to be used for the template's ReplicaSet. If omitted, will
          use the same selector as the Rollout
          +optional
      weight:
        type: integer
        format: int32
        title: Weight sets the percentage of traffic the template's replicas should receive
      service:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.TemplateService'
        title: Service controls the optionally generated service
    title: RolloutExperimentTemplate defines the template used to create experiments for the Rollout's experiment canary step
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutPause:
    type: object
    properties:
      duration:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.util.intstr.IntOrString'
        title: |-
          Duration the amount of time to wait before moving to the next step.
          +optional
    title: RolloutPause defines a pause stage for a rollout
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutSpec:
    type: object
    properties:
      replicas:
        type: integer
        format: int32
        title: |-
          Number of desired pods. This is a pointer to distinguish between explicit
          zero and not specified. Defaults to 1.
          +optional
      selector:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector'
        title: |-
          Label selector for pods. Existing ReplicaSets whose pods are
          selected by this will be the ones affected by this rollout.
          It must match the pod template's labels.
          +optional
      template:
        $ref: '#/definitions/k8s.io.api.core.v1.PodTemplateSpec'
        title: |-
          Template describes the pods that will be created.
          +optional
      workloadRef:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.ObjectRef'
        title: |-
          WorkloadRef holds a references to a workload that provides Pod template
          +optional
      minReadySeconds:
        type: integer
        format: int32
        title: |-
          Minimum number of seconds for which a newly created pod should be ready
          without any of its container crashing, for it to be considered available.
          Defaults to 0 (pod will be considered available as soon as it is ready)
          +optional
      rollbackWindow:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RollbackWindowSpec'
        title: |-
          The window in which a rollback will be fast tracked (fully promoted)
          +optional
      strategy:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutStrategy'
        title: |-
          The deployment strategy to use to replace existing pods with new ones.
          +optional
      revisionHistoryLimit:
        type: integer
        format: int32
        title: The number of old ReplicaSets to retain. If unspecified, will retain 10 old ReplicaSets
      paused:
        type: boolean
        description: Paused pauses the rollout at its current step.
      progressDeadlineSeconds:
        type: integer
        format: int32
        description: |-
          ProgressDeadlineSeconds The maximum time in seconds for a rollout to
          make progress before it is considered to be failed. Argo Rollouts will
          continue to process failed rollouts and a condition with a
          ProgressDeadlineExceeded reason will be surfaced in the rollout status.
          Note that progress will not be estimated during the time a rollout is paused.
          Defaults to 600s.
      progressDeadlineAbort:
        type: boolean
        title: |-
          ProgressDeadlineAbort is whether to abort the update when ProgressDeadlineSeconds
          is exceeded.
          +optional
      restartAt:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        title: RestartAt indicates when all the pods of a Rollout should be restarted
      analysis:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AnalysisRunStrategy'
        title: Analysis configuration for the analysis runs to retain
    title: RolloutSpec is the spec for a Rollout resource
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutStatus:
    type: object
    properties:
      abort:
        type: boolean
        title: Abort cancel the current rollout progression
      pauseConditions:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.PauseCondition'
        title: |-
          PauseConditions is a list of reasons why rollout became automatically paused (e.g.
          CanaryPauseStep, BlueGreenPause, InconclusiveAnalysis). The items in this list are populated
          by the controller but are cleared by the user (e.g. plugin, argo-cd resume action) when they
          wish to unpause. If pause conditions is empty, but controllerPause is true, it indicates
          the user manually unpaused the Rollout
      controllerPause:
        type: boolean
        description: |-
          ControllerPause indicates the controller has paused the rollout. It is set to true when
          the controller adds a pause condition. This field helps to discern the scenario where a
          rollout was resumed after being paused by the controller (e.g. via the plugin). In that
          situation, the pauseConditions would have been cleared , but controllerPause would still be
          set to true.
      abortedAt:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        description: |-
          AbortedAt indicates the controller reconciled an aborted rollout. The controller uses this to understand if
          the controller needs to do some specific work when a Rollout is aborted. For example, the reconcileAbort is used
          to indicate if the Rollout should enter an aborted state when the latest AnalysisRun is a failure, or the controller
          has already put the Rollout into an aborted and should create a new AnalysisRun.
      currentPodHash:
        type: string
        title: |-
          CurrentPodHash the hash of the current pod template
          +optional
      currentStepHash:
        type: string
        title: |-
          CurrentStepHash the hash of the current list of steps for the current strategy. This is used to detect when the
          list of current steps change
          +optional
      replicas:
        type: integer
        format: int32
        title: |-
          Total number of non-terminated pods targeted by this rollout (their labels match the selector).
          +optional
      updatedReplicas:
        type: integer
        format: int32
        title: |-
          Total number of non-terminated pods targeted by this rollout that have the desired template spec.
          +optional
      readyReplicas:
        type: integer
        format: int32
        title: |-
          Total number of ready pods targeted by this rollout.
          +optional
      availableReplicas:
        type: integer
        format: int32
        title: |-
          Total number of available pods (ready for at least minReadySeconds) targeted by this rollout.
          +optional
      currentStepIndex:
        type: integer
        format: int32
        title: |-
          CurrentStepIndex defines the current step of the rollout is on. If the current step index is null, the
          controller will execute the rollout.
          +optional
      collisionCount:
        type: integer
        format: int32
        title: |-
          Count of hash collisions for the Rollout. The Rollout controller uses this
          field as a collision avoidance mechanism when it needs to create the name for the
          newest ReplicaSet.
          +optional
      observedGeneration:
        type: string
        title: |-
          The generation observed by the rollout controller from metadata.generation
          +optional
      conditions:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutCondition'
        title: |-
          Conditions a list of conditions a rollout can have.
          +optional
      canary:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.CanaryStatus'
        title: |-
          Canary describes the state of the canary rollout
          +optional
      blueGreen:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.BlueGreenStatus'
        title: |-
          BlueGreen describes the state of the bluegreen rollout
          +optional
      HPAReplicas:
        type: integer
        format: int32
        title: |-
          HPAReplicas the number of non-terminated replicas that are receiving active traffic
          +optional
      selector:
        type: string
        title: |-
          Selector that identifies the pods that are receiving active traffic
          +optional
      stableRS:
        type: string
        title: |-
          StableRS indicates the replicaset that has successfully rolled out
          +optional
      restartedAt:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        title: RestartedAt indicates last time a Rollout was restarted
      promoteFull:
        type: boolean
        description: PromoteFull indicates if the rollout should perform a full promotion, skipping analysis and pauses.
      phase:
        type: string
        title: Phase is the rollout phase. Clients should only rely on the value if status.observedGeneration equals metadata.generation
      message:
        type: string
        title: Message provides details on why the rollout is in its current phase
      workloadObservedGeneration:
        type: string
        title: |-
          The generation of referenced workload observed by the rollout controller
          +optional
      alb:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.ALBStatus'
        title: / ALB keeps information regarding the ALB and TargetGroups
      albs:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.ALBStatus'
        title: / ALBs keeps information regarding multiple ALBs and TargetGroups in a multi ingress scenario
    title: RolloutStatus is the status for a Rollout resource
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutStrategy:
    type: object
    properties:
      blueGreen:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.BlueGreenStrategy'
        title: +optional
      canary:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.CanaryStrategy'
        title: +optional
    title: RolloutStrategy defines strategy to apply during next rollout
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RolloutTrafficRouting:
    type: object
    properties:
      istio:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.IstioTrafficRouting'
        title: Istio holds Istio specific configuration to route traffic
      nginx:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.NginxTrafficRouting'
        title: Nginx holds Nginx Ingress specific configuration to route traffic
      alb:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.ALBTrafficRouting'
        title: Nginx holds ALB Ingress specific configuration to route traffic
      smi:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.SMITrafficRouting'
        title: SMI holds TrafficSplit specific configuration to route traffic
      ambassador:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AmbassadorTrafficRouting'
        title: Ambassador holds specific configuration to use Ambassador to route traffic
      appMesh:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AppMeshTrafficRouting'
        title: AppMesh holds specific configuration to use AppMesh to route traffic
      traefik:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.TraefikTrafficRouting'
        title: Traefik holds specific configuration to use Traefik to route traffic
      managedRoutes:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.MangedRoutes'
        description: |-
          ManagedRoutes A list of HTTP routes that Argo Rollouts manages, the order of this array also becomes the precedence in the upstream
          traffic router.
      apisix:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.ApisixTrafficRouting'
        title: Apisix holds specific configuration to use Apisix to route traffic
      plugins:
        type: object
        additionalProperties:
          type: string
          format: byte
        title: |-
          +kubebuilder:validation:Schemaless
          +kubebuilder:pruning:PreserveUnknownFields
          +kubebuilder:validation:Type=object
          Plugins holds specific configuration that traffic router plugins can use for routing traffic
      maxTrafficWeight:
        type: integer
        format: int32
        title: MaxTrafficWeight The total weight of traffic. If unspecified, it defaults to 100
    title: RolloutTrafficRouting hosts all the different configuration for supported service meshes to enable more fine-grained traffic routing
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RouteMatch:
    type: object
    properties:
      method:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.StringMatch'
        title: |-
          Method What http methods should be mirrored
          +optional
      path:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.StringMatch'
        title: |-
          Path What url paths should be mirrored
          +optional
      headers:
        type: object
        additionalProperties:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.StringMatch'
        title: |-
          Headers What request with matching headers should be mirrored
          +optional
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RunSummary:
    type: object
    properties:
      count:
        type: integer
        format: int32
        title: This is equal to the sum of Successful, Failed, Inconclusive
      successful:
        type: integer
        format: int32
        title: Successful is the number of times the metric was measured Successful
      failed:
        type: integer
        format: int32
        title: Failed is the number of times the metric was measured Failed
      inconclusive:
        type: integer
        format: int32
        title: Inconclusive is the number of times the metric was measured Inconclusive
      error:
        type: integer
        format: int32
        title: Error is the number of times an error was encountered during measurement
    title: RunSummary contains the final results from the metric executions
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.SMITrafficRouting:
    type: object
    properties:
      rootService:
        type: string
        title: |-
          RootService holds the name of that clients use to communicate.
          +optional
      trafficSplitName:
        type: string
        title: |-
          TrafficSplitName holds the name of the TrafficSplit.
          +optional
    title: SMITrafficRouting configuration for TrafficSplit Custom Resource to control traffic routing
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.ScopeDetail:
    type: object
    properties:
      scope:
        type: string
      region:
        type: string
      step:
        type: string
        format: int64
      start:
        type: string
      end:
        type: string
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.SecretKeyRef:
    type: object
    properties:
      name:
        type: string
        title: Name is the name of the secret
      key:
        type: string
        description: Key is the key of the secret to select from.
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.SecretRef:
    type: object
    properties:
      name:
        type: string
        description: Name refers to the name of the secret that should be used to integrate with Datadog.
      namespaced:
        type: boolean
        title: Namespaced indicates whether the secret is in the namespace where rollouts it installed or in the namespace where the metric was found
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.SetCanaryScale:
    type: object
    properties:
      weight:
        type: integer
        format: int32
        title: |-
          Weight sets the percentage of replicas the newRS should have
          +optional
      replicas:
        type: integer
        format: int32
        title: |-
          Replicas sets the number of replicas the newRS should have
          +optional
      matchTrafficWeight:
        type: boolean
        title: |-
          MatchTrafficWeight cancels out previously set Replicas or Weight, effectively activating SetWeight
          +optional
    title: SetCanaryScale defines how to scale the newRS without changing traffic weight
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.SetHeaderRoute:
    type: object
    properties:
      name:
        type: string
        title: |-
          Name this is the name of the route to use for the mirroring of traffic this also needs
          to be included in the `spec.strategy.canary.trafficRouting.managedRoutes` field
      match:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.HeaderRoutingMatch'
    title: SetHeaderRoute defines the route with specified header name to send 100% of traffic to the canary service
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.SetMirrorRoute:
    type: object
    properties:
      name:
        type: string
        title: |-
          Name this is the name of the route to use for the mirroring of traffic this also needs
          to be included in the `spec.strategy.canary.trafficRouting.managedRoutes` field
      match:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.RouteMatch'
        title: |-
          Match Contains a list of rules that if mated will mirror the traffic to the services
          +optional
      percentage:
        type: integer
        format: int32
        title: |-
          Services The list of services to mirror the traffic to if the method, path, headers match
          Service string `json:"service" protobuf:"bytes,3,opt,name=service"`
          Percentage What percent of the traffic that matched the rules should be mirrored
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.Sigv4Config:
    type: object
    properties:
      address:
        type: string
        title: Region is the AWS Region to sign the SigV4 Request
      profile:
        type: string
        title: Profile is the Credential Profile used to sign the SigV4 Request
      roleArn:
        type: string
        title: RoleARN is the IAM role used to sign the SIgV4 Request
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.SkyWalkingMetric:
    type: object
    properties:
      address:
        type: string
      query:
        type: string
      interval:
        type: string
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.StepPluginStatus:
    type: object
    properties:
      index:
        type: integer
        format: int32
        title: Index is the matching step index of the executed plugin
      name:
        type: string
        title: Name is the matching step name of the executed plugin
      operation:
        type: string
        title: Operation is the name of the operation that produced this status
      phase:
        type: string
        title: Phase is the resulting phase of the operation
      message:
        type: string
        title: Message provides details on why the plugin is in its current phase
      startedAt:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        title: StartedAt indicates when the plugin was first called for the operation
      updatedAt:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        title: UpdatedAt indicates when the plugin was last called for the operation
      finishedAt:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        title: FinishedAt indicates when the operation was completed
      backoff:
        type: string
        title: Backoff is a duration to wait before trying to execute the operation again if it was not completed
      executions:
        type: integer
        format: int32
        title: Executions is the number of time the operation was executed
      disabled:
        type: boolean
        title: Disabled indicates if the plugin is globally disabled
      status:
        type: string
        format: byte
        title: |-
          +kubebuilder:validation:Schemaless
          +kubebuilder:pruning:PreserveUnknownFields
          +kubebuilder:validation:Type=object
          Status holds the internal status of the plugin for this operation
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.StickinessConfig:
    type: object
    properties:
      enabled:
        type: boolean
      durationSeconds:
        type: string
        format: int64
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.StringMatch:
    type: object
    properties:
      exact:
        type: string
        title: Exact The string must match exactly
      prefix:
        type: string
        title: Prefix The string will be prefixed matched
      regex:
        type: string
        title: Regex The string will be regular expression matched
    title: StringMatch Used to define what type of matching we will use exact, prefix, or regular expression
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.TCPRoute:
    type: object
    properties:
      port:
        type: string
        format: int64
        description: Port number of the TCP Route desired to be matched in the given Istio VirtualService.
    description: TCPRoute holds the information on the virtual service's TCP routes that are desired to be matched for changing weights.
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.TLSRoute:
    type: object
    properties:
      port:
        type: string
        format: int64
        description: Port number of the TLS Route desired to be matched in the given Istio VirtualService.
      sniHosts:
        type: array
        items:
          type: string
        description: A list of all the SNI Hosts of the TLS Route desired to be matched in the given Istio VirtualService.
    description: TLSRoute holds the information on the virtual service's TLS/HTTPS routes that are desired to be matched for changing weights.
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.TTLStrategy:
    type: object
    properties:
      secondsAfterCompletion:
        type: integer
        format: int32
        description: SecondsAfterCompletion is the number of seconds to live after completion.
      secondsAfterFailure:
        type: integer
        format: int32
        description: SecondsAfterFailure is the number of seconds to live after failure.
      secondsAfterSuccess:
        type: integer
        format: int32
        description: SecondsAfterSuccess is the number of seconds to live after success.
    title: TTLStrategy defines the strategy for the time to live depending on if the analysis succeeded or failed
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.TemplateService:
    type: object
    properties:
      name:
        type: string
        title: Name of the service generated by the experiment
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.TraefikTrafficRouting:
    type: object
    properties:
      weightedTraefikServiceName:
        type: string
        title: TraefikServiceName refer to the name of the Traefik service used to route traffic to the service
    title: TraefikTrafficRouting defines the configuration required to use Traefik as traffic router
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.TrafficWeights:
    type: object
    properties:
      canary:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.WeightDestination'
        title: Canary is the current traffic weight split to canary ReplicaSet
      stable:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.WeightDestination'
        title: Stable is the current traffic weight split to stable ReplicaSet
      additional:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.WeightDestination'
        title: Additional holds the weights split to additional ReplicaSets such as experiment ReplicaSets
      verified:
        type: boolean
        title: |-
          Verified is an optional indicator that the weight has been verified to have taken effect.
          This is currently only applicable to ALB traffic router
    title: TrafficWeights describes the current status of how traffic has been split
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.ValueFrom:
    type: object
    properties:
      secretKeyRef:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.SecretKeyRef'
        title: |-
          Secret is a reference to where a secret is stored. This field is one of the fields with valueFrom
          +optional
      fieldRef:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.FieldRef'
        title: |-
          FieldRef is a reference to the fields in metadata which we are referencing. This field is one of the fields with
          valueFrom
          +optional
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.WavefrontMetric:
    type: object
    properties:
      address:
        type: string
        title: Address is the HTTP address and port of the wavefront server
      query:
        type: string
        title: Query is a raw wavefront query to perform
    title: WavefrontMetric defines the wavefront query to perform canary analysis
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.WebMetric:
    type: object
    properties:
      method:
        type: string
        title: Method is the method of the web metric (empty defaults to GET)
      url:
        type: string
        title: URL is the address of the web metric
      headers:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.WebMetricHeader'
        title: |-
          +patchMergeKey=key
          +patchStrategy=merge
          Headers are optional HTTP headers to use in the request
      body:
        type: string
        title: Body is the body of the web metric (must be POST/PUT)
      timeoutSeconds:
        type: string
        format: int64
        title: 'TimeoutSeconds is the timeout for the request in seconds (default: 10)'
      jsonPath:
        type: string
        title: 'JSONPath is a JSON Path to use as the result variable (default: "{$}")'
      insecure:
        type: boolean
        title: Insecure skips host TLS verification
      jsonBody:
        type: string
        format: byte
        title: |-
          +kubebuilder:validation:Schemaless
          +kubebuilder:pruning:PreserveUnknownFields
          +kubebuilder:validation:Type=object
          JSONBody is the body of the web metric in a json format (method must be POST/PUT)
      authentication:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.Authentication'
        title: |-
          Authentication details
          +optional
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.WebMetricHeader:
    type: object
    properties:
      key:
        type: string
      value:
        type: string
  github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.WeightDestination:
    type: object
    properties:
      weight:
        type: integer
        format: int32
        title: Weight is an percentage of traffic being sent to this destination
      serviceName:
        type: string
        title: ServiceName is the Kubernetes service name traffic is being sent to
      podTemplateHash:
        type: string
        title: PodTemplateHash is the pod template hash label for this destination
  google.protobuf.Any:
    type: object
    properties:
      type_url:
        type: string
      value:
        type: string
        format: byte
  grpc.gateway.runtime.Error:
    type: object
    properties:
      error:
        type: string
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          $ref: '#/definitions/google.protobuf.Any'
  grpc.gateway.runtime.StreamError:
    type: object
    properties:
      grpc_code:
        type: integer
        format: int32
      http_code:
        type: integer
        format: int32
      message:
        type: string
      http_status:
        type: string
      details:
        type: array
        items:
          $ref: '#/definitions/google.protobuf.Any'
  k8s.io.api.batch.v1.JobSpec:
    type: object
    properties:
      parallelism:
        type: integer
        format: int32
        title: |-
          Specifies the maximum desired number of pods the job should
          run at any given time. The actual number of pods running in steady state will
          be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism),
          i.e. when the work left to do is less than max parallelism.
          More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
          +optional
      completions:
        type: integer
        format: int32
        title: |-
          Specifies the desired number of successfully finished pods the
          job should be run with.  Setting to null means that the success of any
          pod signals the success of all pods, and allows parallelism to have any positive
          value.  Setting to 1 means that parallelism is limited to 1 and the success of that
          pod signals the success of the job.
          More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
          +optional
      activeDeadlineSeconds:
        type: string
        format: int64
        title: |-
          Specifies the duration in seconds relative to the startTime that the job
          may be continuously active before the system tries to terminate it; value
          must be positive integer. If a Job is suspended (at creation or through an
          update), this timer will effectively be stopped and reset when the Job is
          resumed again.
          +optional
      podFailurePolicy:
        $ref: '#/definitions/k8s.io.api.batch.v1.PodFailurePolicy'
        description: |-
          Specifies the policy of handling failed pods. In particular, it allows to
          specify the set of actions and conditions which need to be
          satisfied to take the associated action.
          If empty, the default behaviour applies - the counter of failed pods,
          represented by the jobs's .status.failed field, is incremented and it is
          checked against the backoffLimit. This field cannot be used in combination
          with restartPolicy=OnFailure.

          This field is beta-level. It can be used when the `JobPodFailurePolicy`
          feature gate is enabled (enabled by default).
          +optional
      backoffLimit:
        type: integer
        format: int32
        title: |-
          Specifies the number of retries before marking this job failed.
          Defaults to 6
          +optional
      backoffLimitPerIndex:
        type: integer
        format: int32
        title: |-
          Specifies the limit for the number of retries within an
          index before marking this index as failed. When enabled the number of
          failures per index is kept in the pod's
          batch.kubernetes.io/job-index-failure-count annotation. It can only
          be set when Job's completionMode=Indexed, and the Pod's restart
          policy is Never. The field is immutable.
          This field is beta-level. It can be used when the `JobBackoffLimitPerIndex`
          feature gate is enabled (enabled by default).
          +optional
      maxFailedIndexes:
        type: integer
        format: int32
        title: |-
          Specifies the maximal number of failed indexes before marking the Job as
          failed, when backoffLimitPerIndex is set. Once the number of failed
          indexes exceeds this number the entire Job is marked as Failed and its
          execution is terminated. When left as null the job continues execution of
          all of its indexes and is marked with the `Complete` Job condition.
          It can only be specified when backoffLimitPerIndex is set.
          It can be null or up to completions. It is required and must be
          less than or equal to 10^4 when is completions greater than 10^5.
          This field is beta-level. It can be used when the `JobBackoffLimitPerIndex`
          feature gate is enabled (enabled by default).
          +optional
      selector:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector'
        title: |-
          A label query over pods that should match the pod count.
          Normally, the system sets this field for you.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
          +optional
      manualSelector:
        type: boolean
        title: |-
          manualSelector controls generation of pod labels and pod selectors.
          Leave `manualSelector` unset unless you are certain what you are doing.
          When false or unset, the system pick labels unique to this job
          and appends those labels to the pod template.  When true,
          the user is responsible for picking unique labels and specifying
          the selector.  Failure to pick a unique label may cause this
          and other jobs to not function correctly.  However, You may see
          `manualSelector=true` in jobs that were created with the old `extensions/v1beta1`
          API.
          More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
          +optional
      template:
        $ref: '#/definitions/k8s.io.api.core.v1.PodTemplateSpec'
        title: |-
          Describes the pod that will be created when executing a job.
          The only allowed template.spec.restartPolicy values are "Never" or "OnFailure".
          More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
      ttlSecondsAfterFinished:
        type: integer
        format: int32
        title: |-
          ttlSecondsAfterFinished limits the lifetime of a Job that has finished
          execution (either Complete or Failed). If this field is set,
          ttlSecondsAfterFinished after the Job finishes, it is eligible to be
          automatically deleted. When the Job is being deleted, its lifecycle
          guarantees (e.g. finalizers) will be honored. If this field is unset,
          the Job won't be automatically deleted. If this field is set to zero,
          the Job becomes eligible to be deleted immediately after it finishes.
          +optional
      completionMode:
        type: string
        description: |-
          completionMode specifies how Pod completions are tracked. It can be
          `NonIndexed` (default) or `Indexed`.

          `NonIndexed` means that the Job is considered complete when there have
          been .spec.completions successfully completed Pods. Each Pod completion is
          homologous to each other.

          `Indexed` means that the Pods of a
          Job get an associated completion index from 0 to (.spec.completions - 1),
          available in the annotation batch.kubernetes.io/job-completion-index.
          The Job is considered complete when there is one successfully completed Pod
          for each index.
          When value is `Indexed`, .spec.completions must be specified and
          `.spec.parallelism` must be less than or equal to 10^5.
          In addition, The Pod name takes the form
          `$(job-name)-$(index)-$(random-string)`,
          the Pod hostname takes the form `$(job-name)-$(index)`.

          More completion modes can be added in the future.
          If the Job controller observes a mode that it doesn't recognize, which
          is possible during upgrades due to version skew, the controller
          skips updates for the Job.
          +optional
      suspend:
        type: boolean
        description: |-
          suspend specifies whether the Job controller should create Pods or not. If
          a Job is created with suspend set to true, no Pods are created by the Job
          controller. If a Job is suspended after creation (i.e. the flag goes from
          false to true), the Job controller will delete all active Pods associated
          with this Job. Users must design their workload to gracefully handle this.
          Suspending a Job will reset the StartTime field of the Job, effectively
          resetting the ActiveDeadlineSeconds timer too. Defaults to false.

          +optional
      podReplacementPolicy:
        type: string
        description: |-
          podReplacementPolicy specifies when to create replacement Pods.
          Possible values are:
          - TerminatingOrFailed means that we recreate pods
            when they are terminating (has a metadata.deletionTimestamp) or failed.
          - Failed means to wait until a previously created Pod is fully terminated (has phase
            Failed or Succeeded) before creating a replacement Pod.

          When using podFailurePolicy, Failed is the the only allowed value.
          TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not in use.
          This is an beta field. To use this, enable the JobPodReplacementPolicy feature toggle.
          This is on by default.
          +optional
    description: JobSpec describes how the job execution will look like.
  k8s.io.api.batch.v1.PodFailurePolicy:
    type: object
    properties:
      rules:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.batch.v1.PodFailurePolicyRule'
        title: |-
          A list of pod failure policy rules. The rules are evaluated in order.
          Once a rule matches a Pod failure, the remaining of the rules are ignored.
          When no rule matches the Pod failure, the default handling applies - the
          counter of pod failures is incremented and it is checked against
          the backoffLimit. At most 20 elements are allowed.
          +listType=atomic
    description: PodFailurePolicy describes how failed pods influence the backoffLimit.
  k8s.io.api.batch.v1.PodFailurePolicyOnExitCodesRequirement:
    type: object
    properties:
      containerName:
        type: string
        title: |-
          Restricts the check for exit codes to the container with the
          specified name. When null, the rule applies to all containers.
          When specified, it should match one the container or initContainer
          names in the pod template.
          +optional
      operator:
        type: string
        description: |-
          - In: the requirement is satisfied if at least one container exit code
            (might be multiple if there are multiple containers not restricted
            by the 'containerName' field) is in the set of specified values.
          - NotIn: the requirement is satisfied if at least one container exit code
            (might be multiple if there are multiple containers not restricted
            by the 'containerName' field) is not in the set of specified values.
          Additional values are considered to be added in the future. Clients should
          react to an unknown operator by assuming the requirement is not satisfied.
        title: |-
          Represents the relationship between the container exit code(s) and the
          specified values. Containers completed with success (exit code 0) are
          excluded from the requirement check. Possible values are:
      values:
        type: array
        items:
          type: integer
          format: int32
        title: |-
          Specifies the set of values. Each returned container exit code (might be
          multiple in case of multiple containers) is checked against this set of
          values with respect to the operator. The list of values must be ordered
          and must not contain duplicates. Value '0' cannot be used for the In operator.
          At least one element is required. At most 255 elements are allowed.
          +listType=set
    description: |-
      PodFailurePolicyOnExitCodesRequirement describes the requirement for handling
      a failed pod based on its container exit codes. In particular, it lookups the
      .state.terminated.exitCode for each app container and init container status,
      represented by the .status.containerStatuses and .status.initContainerStatuses
      fields in the Pod status, respectively. Containers completed with success
      (exit code 0) are excluded from the requirement check.
  k8s.io.api.batch.v1.PodFailurePolicyOnPodConditionsPattern:
    type: object
    properties:
      type:
        type: string
        description: |-
          Specifies the required Pod condition type. To match a pod condition
          it is required that specified type equals the pod condition type.
      status:
        type: string
        description: |-
          Specifies the required Pod condition status. To match a pod condition
          it is required that the specified status equals the pod condition status.
          Defaults to True.
    description: |-
      PodFailurePolicyOnPodConditionsPattern describes a pattern for matching
      an actual pod condition type.
  k8s.io.api.batch.v1.PodFailurePolicyRule:
    type: object
    properties:
      action:
        type: string
        description: |-
          - FailJob: indicates that the pod's job is marked as Failed and all
            running pods are terminated.
          - FailIndex: indicates that the pod's index is marked as Failed and will
            not be restarted.
            This value is beta-level. It can be used when the
            `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
          - Ignore: indicates that the counter towards the .backoffLimit is not
            incremented and a replacement pod is created.
          - Count: indicates that the pod is handled in the default way - the
            counter towards the .backoffLimit is incremented.
          Additional values are considered to be added in the future. Clients should
          react to an unknown action by skipping the rule.
        title: |-
          Specifies the action taken on a pod failure when the requirements are satisfied.
          Possible values are:
      onExitCodes:
        $ref: '#/definitions/k8s.io.api.batch.v1.PodFailurePolicyOnExitCodesRequirement'
        title: |-
          Represents the requirement on the container exit codes.
          +optional
      onPodConditions:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.batch.v1.PodFailurePolicyOnPodConditionsPattern'
        title: |-
          Represents the requirement on the pod conditions. The requirement is represented
          as a list of pod condition patterns. The requirement is satisfied if at
          least one pattern matches an actual pod condition. At most 20 elements are allowed.
          +listType=atomic
          +optional
    description: |-
      PodFailurePolicyRule describes how a pod failure is handled when the requirements are met.
      One of onExitCodes and onPodConditions, but not both, can be used in each rule.
  k8s.io.api.core.v1.AWSElasticBlockStoreVolumeSource:
    type: object
    properties:
      volumeID:
        type: string
        title: |-
          volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
      fsType:
        type: string
        title: |-
          fsType is the filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
      partition:
        type: integer
        format: int32
        title: |-
          partition is the partition in the volume that you want to mount.
          If omitted, the default is to mount by volume name.
          Examples: For volume /dev/sda1, you specify the partition as "1".
          Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
          +optional
      readOnly:
        type: boolean
        title: |-
          readOnly value true will force the readOnly setting in VolumeMounts.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
          +optional
    description: |-
      Represents a Persistent Disk resource in AWS.

      An AWS EBS disk must exist before mounting to a container. The disk
      must also be in the same AWS zone as the kubelet. An AWS EBS disk
      can only be mounted as read/write once. AWS EBS volumes support
      ownership management and SELinux relabeling.
  k8s.io.api.core.v1.Affinity:
    type: object
    properties:
      nodeAffinity:
        $ref: '#/definitions/k8s.io.api.core.v1.NodeAffinity'
        title: |-
          Describes node affinity scheduling rules for the pod.
          +optional
      podAffinity:
        $ref: '#/definitions/k8s.io.api.core.v1.PodAffinity'
        title: |-
          Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
          +optional
      podAntiAffinity:
        $ref: '#/definitions/k8s.io.api.core.v1.PodAntiAffinity'
        title: |-
          Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
          +optional
    description: Affinity is a group of affinity scheduling rules.
  k8s.io.api.core.v1.AzureDiskVolumeSource:
    type: object
    properties:
      diskName:
        type: string
        title: diskName is the Name of the data disk in the blob storage
      diskURI:
        type: string
        title: diskURI is the URI of data disk in the blob storage
      cachingMode:
        type: string
        title: |-
          cachingMode is the Host Caching mode: None, Read Only, Read Write.
          +optional
      fsType:
        type: string
        title: |-
          fsType is Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          +optional
      readOnly:
        type: boolean
        title: |-
          readOnly Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
      kind:
        type: string
        title: 'kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared'
    description: AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
  k8s.io.api.core.v1.AzureFileVolumeSource:
    type: object
    properties:
      secretName:
        type: string
        title: secretName is the  name of secret that contains Azure Storage Account Name and Key
      shareName:
        type: string
        title: shareName is the azure share Name
      readOnly:
        type: boolean
        title: |-
          readOnly defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
    description: AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
  k8s.io.api.core.v1.CSIVolumeSource:
    type: object
    properties:
      driver:
        type: string
        description: |-
          driver is the name of the CSI driver that handles this volume.
          Consult with your admin for the correct name as registered in the cluster.
      readOnly:
        type: boolean
        title: |-
          readOnly specifies a read-only configuration for the volume.
          Defaults to false (read/write).
          +optional
      fsType:
        type: string
        title: |-
          fsType to mount. Ex. "ext4", "xfs", "ntfs".
          If not provided, the empty value is passed to the associated CSI driver
          which will determine the default filesystem to apply.
          +optional
      volumeAttributes:
        type: object
        additionalProperties:
          type: string
        title: |-
          volumeAttributes stores driver-specific properties that are passed to the CSI
          driver. Consult your driver's documentation for supported values.
          +optional
      nodePublishSecretRef:
        $ref: '#/definitions/k8s.io.api.core.v1.LocalObjectReference'
        title: |-
          nodePublishSecretRef is a reference to the secret object containing
          sensitive information to pass to the CSI driver to complete the CSI
          NodePublishVolume and NodeUnpublishVolume calls.
          This field is optional, and  may be empty if no secret is required. If the
          secret object contains more than one secret, all secret references are passed.
          +optional
    title: Represents a source location of a volume to mount, managed by an external CSI driver
  k8s.io.api.core.v1.Capabilities:
    type: object
    properties:
      add:
        type: array
        items:
          type: string
        title: |-
          Added capabilities
          +optional
      drop:
        type: array
        items:
          type: string
        title: |-
          Removed capabilities
          +optional
    description: Adds and removes POSIX capabilities from running containers.
  k8s.io.api.core.v1.CephFSVolumeSource:
    type: object
    properties:
      monitors:
        type: array
        items:
          type: string
        title: |-
          monitors is Required: Monitors is a collection of Ceph monitors
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
      path:
        type: string
        title: |-
          path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
          +optional
      user:
        type: string
        title: |-
          user is optional: User is the rados user name, default is admin
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
          +optional
      secretFile:
        type: string
        title: |-
          secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
          +optional
      secretRef:
        $ref: '#/definitions/k8s.io.api.core.v1.LocalObjectReference'
        title: |-
          secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
          +optional
      readOnly:
        type: boolean
        title: |-
          readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
          +optional
    description: |-
      Represents a Ceph Filesystem mount that lasts the lifetime of a pod
      Cephfs volumes do not support ownership management or SELinux relabeling.
  k8s.io.api.core.v1.CinderVolumeSource:
    type: object
    properties:
      volumeID:
        type: string
        title: |-
          volumeID used to identify the volume in cinder.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
      fsType:
        type: string
        title: |-
          fsType is the filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
          +optional
      readOnly:
        type: boolean
        title: |-
          readOnly defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
          +optional
      secretRef:
        $ref: '#/definitions/k8s.io.api.core.v1.LocalObjectReference'
        title: |-
          secretRef is optional: points to a secret object containing parameters used to connect
          to OpenStack.
          +optional
    description: |-
      Represents a cinder volume resource in Openstack.
      A Cinder volume must exist before mounting to a container.
      The volume must also be in the same region as the kubelet.
      Cinder volumes support ownership management and SELinux relabeling.
  k8s.io.api.core.v1.ClaimSource:
    type: object
    properties:
      resourceClaimName:
        type: string
        description: |-
          ResourceClaimName is the name of a ResourceClaim object in the same
          namespace as this pod.
      resourceClaimTemplateName:
        type: string
        description: |-
          ResourceClaimTemplateName is the name of a ResourceClaimTemplate
          object in the same namespace as this pod.

          The template will be used to create a new ResourceClaim, which will
          be bound to this pod. When this pod is deleted, the ResourceClaim
          will also be deleted. The pod name and resource name, along with a
          generated component, will be used to form a unique name for the
          ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.

          This field is immutable and no changes will be made to the
          corresponding ResourceClaim by the control plane after creating the
          ResourceClaim.
    description: |-
      ClaimSource describes a reference to a ResourceClaim.

      Exactly one of these fields should be set.  Consumers of this type must
      treat an empty object as if it has an unknown value.
  k8s.io.api.core.v1.ClusterTrustBundleProjection:
    type: object
    properties:
      name:
        type: string
        title: |-
          Select a single ClusterTrustBundle by object name.  Mutually-exclusive
          with signerName and labelSelector.
          +optional
      signerName:
        type: string
        title: |-
          Select all ClusterTrustBundles that match this signer name.
          Mutually-exclusive with name.  The contents of all selected
          ClusterTrustBundles will be unified and deduplicated.
          +optional
      labelSelector:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector'
        title: |-
          Select all ClusterTrustBundles that match this label selector.  Only has
          effect if signerName is set.  Mutually-exclusive with name.  If unset,
          interpreted as "match nothing".  If set but empty, interpreted as "match
          everything".
          +optional
      optional:
        type: boolean
        title: |-
          If true, don't block pod startup if the referenced ClusterTrustBundle(s)
          aren't available.  If using name, then the named ClusterTrustBundle is
          allowed not to exist.  If using signerName, then the combination of
          signerName and labelSelector is allowed to match zero
          ClusterTrustBundles.
          +optional
      path:
        type: string
        description: Relative path from the volume root to write the bundle.
    description: |-
      ClusterTrustBundleProjection describes how to select a set of
      ClusterTrustBundle objects and project their contents into the pod
      filesystem.
  k8s.io.api.core.v1.ConfigMapEnvSource:
    type: object
    properties:
      localObjectReference:
        $ref: '#/definitions/k8s.io.api.core.v1.LocalObjectReference'
        description: The ConfigMap to select from.
      optional:
        type: boolean
        title: |-
          Specify whether the ConfigMap must be defined
          +optional
    description: |-
      ConfigMapEnvSource selects a ConfigMap to populate the environment
      variables with.

      The contents of the target ConfigMap's Data field will represent the
      key-value pairs as environment variables.
  k8s.io.api.core.v1.ConfigMapKeySelector:
    type: object
    properties:
      localObjectReference:
        $ref: '#/definitions/k8s.io.api.core.v1.LocalObjectReference'
        description: The ConfigMap to select from.
      key:
        type: string
        description: The key to select.
      optional:
        type: boolean
        title: |-
          Specify whether the ConfigMap or its key must be defined
          +optional
    title: |-
      Selects a key from a ConfigMap.
      +structType=atomic
  k8s.io.api.core.v1.ConfigMapProjection:
    type: object
    properties:
      localObjectReference:
        $ref: '#/definitions/k8s.io.api.core.v1.LocalObjectReference'
      items:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.KeyToPath'
        title: |-
          items if unspecified, each key-value pair in the Data field of the referenced
          ConfigMap will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the ConfigMap,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
      optional:
        type: boolean
        title: |-
          optional specify whether the ConfigMap or its keys must be defined
          +optional
    description: |-
      Adapts a ConfigMap into a projected volume.

      The contents of the target ConfigMap's Data field will be presented in a
      projected volume as files using the keys in the Data field as the file names,
      unless the items element is populated with specific mappings of keys to paths.
      Note that this is identical to a configmap volume source without the default
      mode.
  k8s.io.api.core.v1.ConfigMapVolumeSource:
    type: object
    properties:
      localObjectReference:
        $ref: '#/definitions/k8s.io.api.core.v1.LocalObjectReference'
      items:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.KeyToPath'
        title: |-
          items if unspecified, each key-value pair in the Data field of the referenced
          ConfigMap will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the ConfigMap,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
      defaultMode:
        type: integer
        format: int32
        title: |-
          defaultMode is optional: mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
      optional:
        type: boolean
        title: |-
          optional specify whether the ConfigMap or its keys must be defined
          +optional
    description: |-
      Adapts a ConfigMap into a volume.

      The contents of the target ConfigMap's Data field will be presented in a
      volume as files using the keys in the Data field as the file names, unless
      the items element is populated with specific mappings of keys to paths.
      ConfigMap volumes support ownership management and SELinux relabeling.
  k8s.io.api.core.v1.Container:
    type: object
    properties:
      name:
        type: string
        description: |-
          Name of the container specified as a DNS_LABEL.
          Each container in a pod must have a unique name (DNS_LABEL).
          Cannot be updated.
      image:
        type: string
        title: |-
          Container image name.
          More info: https://kubernetes.io/docs/concepts/containers/images
          This field is optional to allow higher level config management to default or override
          container images in workload controllers like Deployments and StatefulSets.
          +optional
      command:
        type: array
        items:
          type: string
        title: |-
          Entrypoint array. Not executed within a shell.
          The container image's ENTRYPOINT is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
          produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
          of whether the variable exists or not. Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
      args:
        type: array
        items:
          type: string
        title: |-
          Arguments to the entrypoint.
          The container image's CMD is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
          produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
          of whether the variable exists or not. Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
      workingDir:
        type: string
        title: |-
          Container's working directory.
          If not specified, the container runtime's default will be used, which
          might be configured in the container image.
          Cannot be updated.
          +optional
      ports:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.ContainerPort'
        title: |-
          List of ports to expose from the container. Not specifying a port here
          DOES NOT prevent that port from being exposed. Any port which is
          listening on the default "0.0.0.0" address inside a container will be
          accessible from the network.
          Modifying this array with strategic merge patch may corrupt the data.
          For more information See https://github.com/kubernetes/kubernetes/issues/108255.
          Cannot be updated.
          +optional
          +patchMergeKey=containerPort
          +patchStrategy=merge
          +listType=map
          +listMapKey=containerPort
          +listMapKey=protocol
      envFrom:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.EnvFromSource'
        title: |-
          List of sources to populate environment variables in the container.
          The keys defined within a source must be a C_IDENTIFIER. All invalid keys
          will be reported as an event when the container is starting. When a key exists in multiple
          sources, the value associated with the last source will take precedence.
          Values defined by an Env with a duplicate key will take precedence.
          Cannot be updated.
          +optional
      env:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.EnvVar'
        title: |-
          List of environment variables to set in the container.
          Cannot be updated.
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
      resources:
        $ref: '#/definitions/k8s.io.api.core.v1.ResourceRequirements'
        title: |-
          Compute Resources required by this container.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          +optional
      resizePolicy:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.ContainerResizePolicy'
        title: |-
          Resources resize policy for the container.
          +featureGate=InPlacePodVerticalScaling
          +optional
          +listType=atomic
      restartPolicy:
        type: string
        title: |-
          RestartPolicy defines the restart behavior of individual containers in a pod.
          This field may only be set for init containers, and the only allowed value is "Always".
          For non-init containers or when this field is not specified,
          the restart behavior is defined by the Pod's restart policy and the container type.
          Setting the RestartPolicy as "Always" for the init container will have the following effect:
          this init container will be continually restarted on
          exit until all regular containers have terminated. Once all regular
          containers have completed, all init containers with restartPolicy "Always"
          will be shut down. This lifecycle differs from normal init containers and
          is often referred to as a "sidecar" container. Although this init
          container still starts in the init container sequence, it does not wait
          for the container to complete before proceeding to the next init
          container. Instead, the next init container starts immediately after this
          init container is started, or after any startupProbe has successfully
          completed.
          +featureGate=SidecarContainers
          +optional
      volumeMounts:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.VolumeMount'
        title: |-
          Pod volumes to mount into the container's filesystem.
          Cannot be updated.
          +optional
          +patchMergeKey=mountPath
          +patchStrategy=merge
      volumeDevices:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.VolumeDevice'
        title: |-
          volumeDevices is the list of block devices to be used by the container.
          +patchMergeKey=devicePath
          +patchStrategy=merge
          +optional
      livenessProbe:
        $ref: '#/definitions/k8s.io.api.core.v1.Probe'
        title: |-
          Periodic probe of container liveness.
          Container will be restarted if the probe fails.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
      readinessProbe:
        $ref: '#/definitions/k8s.io.api.core.v1.Probe'
        title: |-
          Periodic probe of container service readiness.
          Container will be removed from service endpoints if the probe fails.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
      startupProbe:
        $ref: '#/definitions/k8s.io.api.core.v1.Probe'
        title: |-
          StartupProbe indicates that the Pod has successfully initialized.
          If specified, no other probes are executed until this completes successfully.
          If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
          This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
          when it might take a long time to load data or warm a cache, than during steady-state operation.
          This cannot be updated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
      lifecycle:
        $ref: '#/definitions/k8s.io.api.core.v1.Lifecycle'
        title: |-
          Actions that the management system should take in response to container lifecycle events.
          Cannot be updated.
          +optional
      terminationMessagePath:
        type: string
        title: |-
          Optional: Path at which the file to which the container's termination message
          will be written is mounted into the container's filesystem.
          Message written is intended to be brief final status, such as an assertion failure message.
          Will be truncated by the node if greater than 4096 bytes. The total message length across
          all containers will be limited to 12kb.
          Defaults to /dev/termination-log.
          Cannot be updated.
          +optional
      terminationMessagePolicy:
        type: string
        title: |-
          Indicate how the termination message should be populated. File will use the contents of
          terminationMessagePath to populate the container status message on both success and failure.
          FallbackToLogsOnError will use the last chunk of container log output if the termination
          message file is empty and the container exited with an error.
          The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
          Defaults to File.
          Cannot be updated.
          +optional
      imagePullPolicy:
        type: string
        title: |-
          Image pull policy.
          One of Always, Never, IfNotPresent.
          Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
          +optional
      securityContext:
        $ref: '#/definitions/k8s.io.api.core.v1.SecurityContext'
        title: |-
          SecurityContext defines the security options the container should be run with.
          If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
          More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
          +optional
      stdin:
        type: boolean
        title: |-
          Whether this container should allocate a buffer for stdin in the container runtime. If this
          is not set, reads from stdin in the container will always result in EOF.
          Default is false.
          +optional
      stdinOnce:
        type: boolean
        title: |-
          Whether the container runtime should close the stdin channel after it has been opened by
          a single attach. When stdin is true the stdin stream will remain open across multiple attach
          sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
          first client attaches to stdin, and then remains open and accepts data until the client disconnects,
          at which time stdin is closed and remains closed until the container is restarted. If this
          flag is false, a container processes that reads from stdin will never receive an EOF.
          Default is false
          +optional
      tty:
        type: boolean
        title: |-
          Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
          Default is false.
          +optional
    description: A single application container that you want to run within a pod.
  k8s.io.api.core.v1.ContainerPort:
    type: object
    properties:
      name:
        type: string
        title: |-
          If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
          named port in a pod must have a unique name. Name for the port that can be
          referred to by services.
          +optional
      hostPort:
        type: integer
        format: int32
        title: |-
          Number of port to expose on the host.
          If specified, this must be a valid port number, 0 < x < 65536.
          If HostNetwork is specified, this must match ContainerPort.
          Most containers do not need this.
          +optional
      containerPort:
        type: integer
        format: int32
        description: |-
          Number of port to expose on the pod's IP address.
          This must be a valid port number, 0 < x < 65536.
      protocol:
        type: string
        title: |-
          Protocol for port. Must be UDP, TCP, or SCTP.
          Defaults to "TCP".
          +optional
          +default="TCP"
      hostIP:
        type: string
        title: |-
          What host IP to bind the external port to.
          +optional
    description: ContainerPort represents a network port in a single container.
  k8s.io.api.core.v1.ContainerResizePolicy:
    type: object
    properties:
      resourceName:
        type: string
        description: |-
          Name of the resource to which this resource resize policy applies.
          Supported values: cpu, memory.
      restartPolicy:
        type: string
        description: |-
          Restart policy to apply when specified resource is resized.
          If not specified, it defaults to NotRequired.
    description: ContainerResizePolicy represents resource resize policy for the container.
  k8s.io.api.core.v1.DownwardAPIProjection:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.DownwardAPIVolumeFile'
        title: |-
          Items is a list of DownwardAPIVolume file
          +optional
    description: |-
      Represents downward API info for projecting into a projected volume.
      Note that this is identical to a downwardAPI volume source without the default
      mode.
  k8s.io.api.core.v1.DownwardAPIVolumeFile:
    type: object
    properties:
      path:
        type: string
        title: 'Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the ''..'' path. Must be utf-8 encoded. The first item of the relative path must not start with ''..'''
      fieldRef:
        $ref: '#/definitions/k8s.io.api.core.v1.ObjectFieldSelector'
        title: |-
          Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
          +optional
      resourceFieldRef:
        $ref: '#/definitions/k8s.io.api.core.v1.ResourceFieldSelector'
        title: |-
          Selects a resource of the container: only resources limits and requests
          (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
          +optional
      mode:
        type: integer
        format: int32
        title: |-
          Optional: mode bits used to set permissions on this file, must be an octal value
          between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          If not specified, the volume defaultMode will be used.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
    title: DownwardAPIVolumeFile represents information to create the file containing the pod field
  k8s.io.api.core.v1.DownwardAPIVolumeSource:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.DownwardAPIVolumeFile'
        title: |-
          Items is a list of downward API volume file
          +optional
      defaultMode:
        type: integer
        format: int32
        title: |-
          Optional: mode bits to use on created files by default. Must be a
          Optional: mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
    description: |-
      DownwardAPIVolumeSource represents a volume containing downward API info.
      Downward API volumes support ownership management and SELinux relabeling.
  k8s.io.api.core.v1.EmptyDirVolumeSource:
    type: object
    properties:
      medium:
        type: string
        title: |-
          medium represents what type of storage medium should back this directory.
          The default is "" which means to use the node's default medium.
          Must be an empty string (default) or Memory.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
          +optional
      sizeLimit:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity'
        title: |-
          sizeLimit is the total amount of local storage required for this EmptyDir volume.
          The size limit is also applicable for memory medium.
          The maximum usage on memory medium EmptyDir would be the minimum value between
          the SizeLimit specified here and the sum of memory limits of all containers in a pod.
          The default is nil which means that the limit is undefined.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
          +optional
    description: |-
      Represents an empty directory for a pod.
      Empty directory volumes support ownership management and SELinux relabeling.
  k8s.io.api.core.v1.EnvFromSource:
    type: object
    properties:
      prefix:
        type: string
        title: |-
          An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
          +optional
      configMapRef:
        $ref: '#/definitions/k8s.io.api.core.v1.ConfigMapEnvSource'
        title: |-
          The ConfigMap to select from
          +optional
      secretRef:
        $ref: '#/definitions/k8s.io.api.core.v1.SecretEnvSource'
        title: |-
          The Secret to select from
          +optional
    title: EnvFromSource represents the source of a set of ConfigMaps
  k8s.io.api.core.v1.EnvVar:
    type: object
    properties:
      name:
        type: string
        description: Name of the environment variable. Must be a C_IDENTIFIER.
      value:
        type: string
        title: |-
          Variable references $(VAR_NAME) are expanded
          using the previously defined environment variables in the container and
          any service environment variables. If a variable cannot be resolved,
          the reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
          "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
          Escaped references will never be expanded, regardless of whether the variable
          exists or not.
          Defaults to "".
          +optional
      valueFrom:
        $ref: '#/definitions/k8s.io.api.core.v1.EnvVarSource'
        title: |-
          Source for the environment variable's value. Cannot be used if value is not empty.
          +optional
    description: EnvVar represents an environment variable present in a Container.
  k8s.io.api.core.v1.EnvVarSource:
    type: object
    properties:
      fieldRef:
        $ref: '#/definitions/k8s.io.api.core.v1.ObjectFieldSelector'
        title: |-
          Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
          spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
          +optional
      resourceFieldRef:
        $ref: '#/definitions/k8s.io.api.core.v1.ResourceFieldSelector'
        title: |-
          Selects a resource of the container: only resources limits and requests
          (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
          +optional
      configMapKeyRef:
        $ref: '#/definitions/k8s.io.api.core.v1.ConfigMapKeySelector'
        title: |-
          Selects a key of a ConfigMap.
          +optional
      secretKeyRef:
        $ref: '#/definitions/k8s.io.api.core.v1.SecretKeySelector'
        title: |-
          Selects a key of a secret in the pod's namespace
          +optional
    description: EnvVarSource represents a source for the value of an EnvVar.
  k8s.io.api.core.v1.EphemeralContainer:
    type: object
    properties:
      ephemeralContainerCommon:
        $ref: '#/definitions/k8s.io.api.core.v1.EphemeralContainerCommon'
        description: |-
          Ephemeral containers have all of the fields of Container, plus additional fields
          specific to ephemeral containers. Fields in common with Container are in the
          following inlined struct so than an EphemeralContainer may easily be converted
          to a Container.
      targetContainerName:
        type: string
        description: |-
          If set, the name of the container from PodSpec that this ephemeral container targets.
          The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container.
          If not set then the ephemeral container uses the namespaces configured in the Pod spec.

          The container runtime must implement support for this feature. If the runtime does not
          support namespace targeting then the result of setting this field is undefined.
          +optional
    description: |-
      An EphemeralContainer is a temporary container that you may add to an existing Pod for
      user-initiated activities such as debugging. Ephemeral containers have no resource or
      scheduling guarantees, and they will not be restarted when they exit or when a Pod is
      removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the
      Pod to exceed its resource allocation.

      To add an ephemeral container, use the ephemeralcontainers subresource of an existing
      Pod. Ephemeral containers may not be removed or restarted.
  k8s.io.api.core.v1.EphemeralContainerCommon:
    type: object
    properties:
      name:
        type: string
        description: |-
          Name of the ephemeral container specified as a DNS_LABEL.
          This name must be unique among all containers, init containers and ephemeral containers.
      image:
        type: string
        title: |-
          Container image name.
          More info: https://kubernetes.io/docs/concepts/containers/images
      command:
        type: array
        items:
          type: string
        title: |-
          Entrypoint array. Not executed within a shell.
          The image's ENTRYPOINT is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
          produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
          of whether the variable exists or not. Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
      args:
        type: array
        items:
          type: string
        title: |-
          Arguments to the entrypoint.
          The image's CMD is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
          produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
          of whether the variable exists or not. Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
      workingDir:
        type: string
        title: |-
          Container's working directory.
          If not specified, the container runtime's default will be used, which
          might be configured in the container image.
          Cannot be updated.
          +optional
      ports:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.ContainerPort'
        title: |-
          Ports are not allowed for ephemeral containers.
          +optional
          +patchMergeKey=containerPort
          +patchStrategy=merge
          +listType=map
          +listMapKey=containerPort
          +listMapKey=protocol
      envFrom:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.EnvFromSource'
        title: |-
          List of sources to populate environment variables in the container.
          The keys defined within a source must be a C_IDENTIFIER. All invalid keys
          will be reported as an event when the container is starting. When a key exists in multiple
          sources, the value associated with the last source will take precedence.
          Values defined by an Env with a duplicate key will take precedence.
          Cannot be updated.
          +optional
      env:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.EnvVar'
        title: |-
          List of environment variables to set in the container.
          Cannot be updated.
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
      resources:
        $ref: '#/definitions/k8s.io.api.core.v1.ResourceRequirements'
        title: |-
          Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources
          already allocated to the pod.
          +optional
      resizePolicy:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.ContainerResizePolicy'
        title: |-
          Resources resize policy for the container.
          +featureGate=InPlacePodVerticalScaling
          +optional
          +listType=atomic
      restartPolicy:
        type: string
        title: |-
          Restart policy for the container to manage the restart behavior of each
          container within a pod.
          This may only be set for init containers. You cannot set this field on
          ephemeral containers.
          +featureGate=SidecarContainers
          +optional
      volumeMounts:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.VolumeMount'
        title: |-
          Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers.
          Cannot be updated.
          +optional
          +patchMergeKey=mountPath
          +patchStrategy=merge
      volumeDevices:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.VolumeDevice'
        title: |-
          volumeDevices is the list of block devices to be used by the container.
          +patchMergeKey=devicePath
          +patchStrategy=merge
          +optional
      livenessProbe:
        $ref: '#/definitions/k8s.io.api.core.v1.Probe'
        title: |-
          Probes are not allowed for ephemeral containers.
          +optional
      readinessProbe:
        $ref: '#/definitions/k8s.io.api.core.v1.Probe'
        title: |-
          Probes are not allowed for ephemeral containers.
          +optional
      startupProbe:
        $ref: '#/definitions/k8s.io.api.core.v1.Probe'
        title: |-
          Probes are not allowed for ephemeral containers.
          +optional
      lifecycle:
        $ref: '#/definitions/k8s.io.api.core.v1.Lifecycle'
        title: |-
          Lifecycle is not allowed for ephemeral containers.
          +optional
      terminationMessagePath:
        type: string
        title: |-
          Optional: Path at which the file to which the container's termination message
          will be written is mounted into the container's filesystem.
          Message written is intended to be brief final status, such as an assertion failure message.
          Will be truncated by the node if greater than 4096 bytes. The total message length across
          all containers will be limited to 12kb.
          Defaults to /dev/termination-log.
          Cannot be updated.
          +optional
      terminationMessagePolicy:
        type: string
        title: |-
          Indicate how the termination message should be populated. File will use the contents of
          terminationMessagePath to populate the container status message on both success and failure.
          FallbackToLogsOnError will use the last chunk of container log output if the termination
          message file is empty and the container exited with an error.
          The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
          Defaults to File.
          Cannot be updated.
          +optional
      imagePullPolicy:
        type: string
        title: |-
          Image pull policy.
          One of Always, Never, IfNotPresent.
          Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
          +optional
      securityContext:
        $ref: '#/definitions/k8s.io.api.core.v1.SecurityContext'
        title: |-
          Optional: SecurityContext defines the security options the ephemeral container should be run with.
          If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
          +optional
      stdin:
        type: boolean
        title: |-
          Whether this container should allocate a buffer for stdin in the container runtime. If this
          is not set, reads from stdin in the container will always result in EOF.
          Default is false.
          +optional
      stdinOnce:
        type: boolean
        title: |-
          Whether the container runtime should close the stdin channel after it has been opened by
          a single attach. When stdin is true the stdin stream will remain open across multiple attach
          sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
          first client attaches to stdin, and then remains open and accepts data until the client disconnects,
          at which time stdin is closed and remains closed until the container is restarted. If this
          flag is false, a container processes that reads from stdin will never receive an EOF.
          Default is false
          +optional
      tty:
        type: boolean
        title: |-
          Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
          Default is false.
          +optional
    description: |-
      EphemeralContainerCommon is a copy of all fields in Container to be inlined in
      EphemeralContainer. This separate type allows easy conversion from EphemeralContainer
      to Container and allows separate documentation for the fields of EphemeralContainer.
      When a new field is added to Container it must be added here as well.
  k8s.io.api.core.v1.EphemeralVolumeSource:
    type: object
    properties:
      volumeClaimTemplate:
        $ref: '#/definitions/k8s.io.api.core.v1.PersistentVolumeClaimTemplate'
        description: |-
          Will be used to create a stand-alone PVC to provision the volume.
          The pod in which this EphemeralVolumeSource is embedded will be the
          owner of the PVC, i.e. the PVC will be deleted together with the
          pod.  The name of the PVC will be `<pod name>-<volume name>` where
          `<volume name>` is the name from the `PodSpec.Volumes` array
          entry. Pod validation will reject the pod if the concatenated name
          is not valid for a PVC (for example, too long).

          An existing PVC with that name that is not owned by the pod
          will *not* be used for the pod to avoid using an unrelated
          volume by mistake. Starting the pod is then blocked until
          the unrelated PVC is removed. If such a pre-created PVC is
          meant to be used by the pod, the PVC has to updated with an
          owner reference to the pod once the pod exists. Normally
          this should not be necessary, but it may be useful when
          manually reconstructing a broken cluster.

          This field is read-only and no changes will be made by Kubernetes
          to the PVC after it has been created.

          Required, must not be nil.
    description: Represents an ephemeral volume that is handled by a normal storage driver.
  k8s.io.api.core.v1.ExecAction:
    type: object
    properties:
      command:
        type: array
        items:
          type: string
        title: |-
          Command is the command line to execute inside the container, the working directory for the
          command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
          not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
          a shell, you need to explicitly call out to that shell.
          Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          +optional
    description: ExecAction describes a "run in container" action.
  k8s.io.api.core.v1.FCVolumeSource:
    type: object
    properties:
      targetWWNs:
        type: array
        items:
          type: string
        title: |-
          targetWWNs is Optional: FC target worldwide names (WWNs)
          +optional
      lun:
        type: integer
        format: int32
        title: |-
          lun is Optional: FC target lun number
          +optional
      fsType:
        type: string
        title: |-
          fsType is the filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
      readOnly:
        type: boolean
        title: |-
          readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
      wwids:
        type: array
        items:
          type: string
        title: |-
          wwids Optional: FC volume world wide identifiers (wwids)
          Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
          +optional
    description: |-
      Represents a Fibre Channel volume.
      Fibre Channel volumes can only be mounted as read/write once.
      Fibre Channel volumes support ownership management and SELinux relabeling.
  k8s.io.api.core.v1.FlexVolumeSource:
    type: object
    properties:
      driver:
        type: string
        description: driver is the name of the driver to use for this volume.
      fsType:
        type: string
        title: |-
          fsType is the filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
          +optional
      secretRef:
        $ref: '#/definitions/k8s.io.api.core.v1.LocalObjectReference'
        title: |-
          secretRef is Optional: secretRef is reference to the secret object containing
          sensitive information to pass to the plugin scripts. This may be
          empty if no secret object is specified. If the secret object
          contains more than one secret, all secrets are passed to the plugin
          scripts.
          +optional
      readOnly:
        type: boolean
        title: |-
          readOnly is Optional: defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
      options:
        type: object
        additionalProperties:
          type: string
        title: |-
          options is Optional: this field holds extra command options if any.
          +optional
    description: |-
      FlexVolume represents a generic volume resource that is
      provisioned/attached using an exec based plugin.
  k8s.io.api.core.v1.FlockerVolumeSource:
    type: object
    properties:
      datasetName:
        type: string
        title: |-
          datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
          should be considered as deprecated
          +optional
      datasetUUID:
        type: string
        title: |-
          datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
          +optional
    description: |-
      Represents a Flocker volume mounted by the Flocker agent.
      One and only one of datasetName and datasetUUID should be set.
      Flocker volumes do not support ownership management or SELinux relabeling.
  k8s.io.api.core.v1.GCEPersistentDiskVolumeSource:
    type: object
    properties:
      pdName:
        type: string
        title: |-
          pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
      fsType:
        type: string
        title: |-
          fsType is filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
      partition:
        type: integer
        format: int32
        title: |-
          partition is the partition in the volume that you want to mount.
          If omitted, the default is to mount by volume name.
          Examples: For volume /dev/sda1, you specify the partition as "1".
          Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          +optional
      readOnly:
        type: boolean
        title: |-
          readOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          +optional
    description: |-
      Represents a Persistent Disk resource in Google Compute Engine.

      A GCE PD must exist before mounting to a container. The disk must
      also be in the same GCE project and zone as the kubelet. A GCE PD
      can only be mounted as read/write once or read-only many times. GCE
      PDs support ownership management and SELinux relabeling.
  k8s.io.api.core.v1.GRPCAction:
    type: object
    properties:
      port:
        type: integer
        format: int32
        description: Port number of the gRPC service. Number must be in the range 1 to 65535.
      service:
        type: string
        description: |-
          Service is the name of the service to place in the gRPC HealthCheckRequest
          (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

          If this is not specified, the default behavior is defined by gRPC.
          +optional
          +default=""
  k8s.io.api.core.v1.GitRepoVolumeSource:
    type: object
    properties:
      repository:
        type: string
        title: repository is the URL
      revision:
        type: string
        title: |-
          revision is the commit hash for the specified revision.
          +optional
      directory:
        type: string
        title: |-
          directory is the target directory name.
          Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
          git repository.  Otherwise, if specified, the volume will contain the git repository in
          the subdirectory with the given name.
          +optional
    description: |-
      Represents a volume that is populated with the contents of a git repository.
      Git repo volumes do not support ownership management.
      Git repo volumes support SELinux relabeling.

      DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an
      EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
      into the Pod's container.
  k8s.io.api.core.v1.GlusterfsVolumeSource:
    type: object
    properties:
      endpoints:
        type: string
        title: |-
          endpoints is the endpoint name that details Glusterfs topology.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
      path:
        type: string
        title: |-
          path is the Glusterfs volume path.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
      readOnly:
        type: boolean
        title: |-
          readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
          Defaults to false.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
          +optional
    description: |-
      Represents a Glusterfs mount that lasts the lifetime of a pod.
      Glusterfs volumes do not support ownership management or SELinux relabeling.
  k8s.io.api.core.v1.HTTPGetAction:
    type: object
    properties:
      path:
        type: string
        title: |-
          Path to access on the HTTP server.
          +optional
      port:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.util.intstr.IntOrString'
        description: |-
          Name or number of the port to access on the container.
          Number must be in the range 1 to 65535.
          Name must be an IANA_SVC_NAME.
      host:
        type: string
        title: |-
          Host name to connect to, defaults to the pod IP. You probably want to set
          "Host" in httpHeaders instead.
          +optional
      scheme:
        type: string
        title: |-
          Scheme to use for connecting to the host.
          Defaults to HTTP.
          +optional
      httpHeaders:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.HTTPHeader'
        title: |-
          Custom headers to set in the request. HTTP allows repeated headers.
          +optional
    description: HTTPGetAction describes an action based on HTTP Get requests.
  k8s.io.api.core.v1.HTTPHeader:
    type: object
    properties:
      name:
        type: string
        description: |-
          The header field name.
          This will be canonicalized upon output, so case-variant names will be understood as the same header.
      value:
        type: string
        title: The header field value
    title: HTTPHeader describes a custom header to be used in HTTP probes
  k8s.io.api.core.v1.HostAlias:
    type: object
    properties:
      ip:
        type: string
        description: IP address of the host file entry.
      hostnames:
        type: array
        items:
          type: string
        description: Hostnames for the above IP address.
    description: |-
      HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
      pod's hosts file.
  k8s.io.api.core.v1.HostPathVolumeSource:
    type: object
    properties:
      path:
        type: string
        title: |-
          path of the directory on the host.
          If the path is a symlink, it will follow the link to the real path.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
      type:
        type: string
        title: |-
          type for HostPath Volume
          Defaults to ""
          More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
          +optional
    description: |-
      Represents a host path mapped into a pod.
      Host path volumes do not support ownership management or SELinux relabeling.
  k8s.io.api.core.v1.ISCSIVolumeSource:
    type: object
    properties:
      targetPortal:
        type: string
        description: |-
          targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
          is other than default (typically TCP ports 860 and 3260).
      iqn:
        type: string
        description: iqn is the target iSCSI Qualified Name.
      lun:
        type: integer
        format: int32
        description: lun represents iSCSI Target Lun number.
      iscsiInterface:
        type: string
        title: |-
          iscsiInterface is the interface Name that uses an iSCSI transport.
          Defaults to 'default' (tcp).
          +optional
      fsType:
        type: string
        title: |-
          fsType is the filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
      readOnly:
        type: boolean
        title: |-
          readOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
          +optional
      portals:
        type: array
        items:
          type: string
        title: |-
          portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
          is other than default (typically TCP ports 860 and 3260).
          +optional
      chapAuthDiscovery:
        type: boolean
        title: |-
          chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
          +optional
      chapAuthSession:
        type: boolean
        title: |-
          chapAuthSession defines whether support iSCSI Session CHAP authentication
          +optional
      secretRef:
        $ref: '#/definitions/k8s.io.api.core.v1.LocalObjectReference'
        title: |-
          secretRef is the CHAP Secret for iSCSI target and initiator authentication
          +optional
      initiatorName:
        type: string
        title: |-
          initiatorName is the custom iSCSI Initiator Name.
          If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
          <target portal>:<volume name> will be created for the connection.
          +optional
    description: |-
      Represents an ISCSI disk.
      ISCSI volumes can only be mounted as read/write once.
      ISCSI volumes support ownership management and SELinux relabeling.
  k8s.io.api.core.v1.KeyToPath:
    type: object
    properties:
      key:
        type: string
        description: key is the key to project.
      path:
        type: string
        description: |-
          path is the relative path of the file to map the key to.
          May not be an absolute path.
          May not contain the path element '..'.
          May not start with the string '..'.
      mode:
        type: integer
        format: int32
        title: |-
          mode is Optional: mode bits used to set permissions on this file.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          If not specified, the volume defaultMode will be used.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
    description: Maps a string key to a path within a volume.
  k8s.io.api.core.v1.Lifecycle:
    type: object
    properties:
      postStart:
        $ref: '#/definitions/k8s.io.api.core.v1.LifecycleHandler'
        title: |-
          PostStart is called immediately after a container is created. If the handler fails,
          the container is terminated and restarted according to its restart policy.
          Other management of the container blocks until the hook completes.
          More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
          +optional
      preStop:
        $ref: '#/definitions/k8s.io.api.core.v1.LifecycleHandler'
        title: |-
          PreStop is called immediately before a container is terminated due to an
          API request or management event such as liveness/startup probe failure,
          preemption, resource contention, etc. The handler is not called if the
          container crashes or exits. The Pod's termination grace period countdown begins before the
          PreStop hook is executed. Regardless of the outcome of the handler, the
          container will eventually terminate within the Pod's termination grace
          period (unless delayed by finalizers). Other management of the container blocks until the hook completes
          or until the termination grace period is reached.
          More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
          +optional
    description: |-
      Lifecycle describes actions that the management system should take in response to container lifecycle
      events. For the PostStart and PreStop lifecycle handlers, management of the container blocks
      until the action is complete, unless the container process fails, in which case the handler is aborted.
  k8s.io.api.core.v1.LifecycleHandler:
    type: object
    properties:
      exec:
        $ref: '#/definitions/k8s.io.api.core.v1.ExecAction'
        title: |-
          Exec specifies the action to take.
          +optional
      httpGet:
        $ref: '#/definitions/k8s.io.api.core.v1.HTTPGetAction'
        title: |-
          HTTPGet specifies the http request to perform.
          +optional
      tcpSocket:
        $ref: '#/definitions/k8s.io.api.core.v1.TCPSocketAction'
        title: |-
          Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
          for the backward compatibility. There are no validation of this field and
          lifecycle hooks will fail in runtime when tcp handler is specified.
          +optional
      sleep:
        $ref: '#/definitions/k8s.io.api.core.v1.SleepAction'
        title: |-
          Sleep represents the duration that the container should sleep before being terminated.
          +featureGate=PodLifecycleSleepAction
          +optional
    description: |-
      LifecycleHandler defines a specific action that should be taken in a lifecycle
      hook. One and only one of the fields, except TCPSocket must be specified.
  k8s.io.api.core.v1.LocalObjectReference:
    type: object
    properties:
      name:
        type: string
        title: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
    title: |-
      LocalObjectReference contains enough information to let you locate the
      referenced object inside the same namespace.
      +structType=atomic
  k8s.io.api.core.v1.NFSVolumeSource:
    type: object
    properties:
      server:
        type: string
        title: |-
          server is the hostname or IP address of the NFS server.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
      path:
        type: string
        title: |-
          path that is exported by the NFS server.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
      readOnly:
        type: boolean
        title: |-
          readOnly here will force the NFS export to be mounted with read-only permissions.
          Defaults to false.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
          +optional
    description: |-
      Represents an NFS mount that lasts the lifetime of a pod.
      NFS volumes do not support ownership management or SELinux relabeling.
  k8s.io.api.core.v1.NodeAffinity:
    type: object
    properties:
      requiredDuringSchedulingIgnoredDuringExecution:
        $ref: '#/definitions/k8s.io.api.core.v1.NodeSelector'
        title: |-
          If the affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node.
          If the affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to an update), the system
          may or may not try to eventually evict the pod from its node.
          +optional
      preferredDuringSchedulingIgnoredDuringExecution:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.PreferredSchedulingTerm'
        title: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node matches the corresponding matchExpressions; the
          node(s) with the highest sum are the most preferred.
          +optional
    description: Node affinity is a group of node affinity scheduling rules.
  k8s.io.api.core.v1.NodeSelector:
    type: object
    properties:
      nodeSelectorTerms:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.NodeSelectorTerm'
        description: Required. A list of node selector terms. The terms are ORed.
    title: |-
      A node selector represents the union of the results of one or more label queries
      over a set of nodes; that is, it represents the OR of the selectors represented
      by the node selector terms.
      +structType=atomic
  k8s.io.api.core.v1.NodeSelectorRequirement:
    type: object
    properties:
      key:
        type: string
        description: The label key that the selector applies to.
      operator:
        type: string
        description: |-
          Represents a key's relationship to a set of values.
          Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
      values:
        type: array
        items:
          type: string
        title: |-
          An array of string values. If the operator is In or NotIn,
          the values array must be non-empty. If the operator is Exists or DoesNotExist,
          the values array must be empty. If the operator is Gt or Lt, the values
          array must have a single element, which will be interpreted as an integer.
          This array is replaced during a strategic merge patch.
          +optional
    description: |-
      A node selector requirement is a selector that contains values, a key, and an operator
      that relates the key and values.
  k8s.io.api.core.v1.NodeSelectorTerm:
    type: object
    properties:
      matchExpressions:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.NodeSelectorRequirement'
        title: |-
          A list of node selector requirements by node's labels.
          +optional
      matchFields:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.NodeSelectorRequirement'
        title: |-
          A list of node selector requirements by node's fields.
          +optional
    title: |-
      A null or empty node selector term matches no objects. The requirements of
      them are ANDed.
      The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
      +structType=atomic
  k8s.io.api.core.v1.ObjectFieldSelector:
    type: object
    properties:
      apiVersion:
        type: string
        title: |-
          Version of the schema the FieldPath is written in terms of, defaults to "v1".
          +optional
      fieldPath:
        type: string
        description: Path of the field to select in the specified API version.
    title: |-
      ObjectFieldSelector selects an APIVersioned field of an object.
      +structType=atomic
  k8s.io.api.core.v1.PersistentVolumeClaimSpec:
    type: object
    properties:
      accessModes:
        type: array
        items:
          type: string
        title: |-
          accessModes contains the desired access modes the volume should have.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
          +optional
      selector:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector'
        title: |-
          selector is a label query over volumes to consider for binding.
          +optional
      resources:
        $ref: '#/definitions/k8s.io.api.core.v1.VolumeResourceRequirements'
        title: |-
          resources represents the minimum resources the volume should have.
          If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
          that are lower than previous value but must still be higher than capacity recorded in the
          status field of the claim.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
          +optional
      volumeName:
        type: string
        title: |-
          volumeName is the binding reference to the PersistentVolume backing this claim.
          +optional
      storageClassName:
        type: string
        title: |-
          storageClassName is the name of the StorageClass required by the claim.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
          +optional
      volumeMode:
        type: string
        title: |-
          volumeMode defines what type of volume is required by the claim.
          Value of Filesystem is implied when not included in claim spec.
          +optional
      dataSource:
        $ref: '#/definitions/k8s.io.api.core.v1.TypedLocalObjectReference'
        title: |-
          dataSource field can be used to specify either:
          * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
          * An existing PVC (PersistentVolumeClaim)
          If the provisioner or an external controller can support the specified data source,
          it will create a new volume based on the contents of the specified data source.
          When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
          and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
          If the namespace is specified, then dataSourceRef will not be copied to dataSource.
          +optional
      dataSourceRef:
        $ref: '#/definitions/k8s.io.api.core.v1.TypedObjectReference'
        title: |-
          dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
          volume is desired. This may be any object from a non-empty API group (non
          core object) or a PersistentVolumeClaim object.
          When this field is specified, volume binding will only succeed if the type of
          the specified object matches some installed volume populator or dynamic
          provisioner.
          This field will replace the functionality of the dataSource field and as such
          if both fields are non-empty, they must have the same value. For backwards
          compatibility, when namespace isn't specified in dataSourceRef,
          both fields (dataSource and dataSourceRef) will be set to the same
          value automatically if one of them is empty and the other is non-empty.
          When namespace is specified in dataSourceRef,
          dataSource isn't set to the same value and must be empty.
          There are three important differences between dataSource and dataSourceRef:
          * While dataSource only allows two specific types of objects, dataSourceRef
            allows any non-core object, as well as PersistentVolumeClaim objects.
          * While dataSource ignores disallowed values (dropping them), dataSourceRef
            preserves all values, and generates an error if a disallowed value is
            specified.
          * While dataSource only allows local objects, dataSourceRef allows objects
            in any namespaces.
          (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
          (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
          +optional
      volumeAttributesClassName:
        type: string
        title: |-
          volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
          If specified, the CSI driver will create or update the volume with the attributes defined
          in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
          it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
          will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
          If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
          will be set by the persistentvolume controller if it exists.
          If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
          set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
          exists.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass
          (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
          +featureGate=VolumeAttributesClass
          +optional
    title: |-
      PersistentVolumeClaimSpec describes the common attributes of storage devices
      and allows a Source for provider-specific attributes
  k8s.io.api.core.v1.PersistentVolumeClaimTemplate:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: |-
          May contain labels and annotations that will be copied into the PVC
          when creating it. No other fields are allowed and will be rejected during
          validation.

          +optional
      spec:
        $ref: '#/definitions/k8s.io.api.core.v1.PersistentVolumeClaimSpec'
        description: |-
          The specification for the PersistentVolumeClaim. The entire content is
          copied unchanged into the PVC that gets created from this
          template. The same fields as in a PersistentVolumeClaim
          are also valid here.
    description: |-
      PersistentVolumeClaimTemplate is used to produce
      PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
  k8s.io.api.core.v1.PersistentVolumeClaimVolumeSource:
    type: object
    properties:
      claimName:
        type: string
        title: |-
          claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
      readOnly:
        type: boolean
        title: |-
          readOnly Will force the ReadOnly setting in VolumeMounts.
          Default false.
          +optional
    description: |-
      PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace.
      This volume finds the bound PV and mounts that volume for the pod. A
      PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another
      type of volume that is owned by someone else (the system).
  k8s.io.api.core.v1.PhotonPersistentDiskVolumeSource:
    type: object
    properties:
      pdID:
        type: string
        title: pdID is the ID that identifies Photon Controller persistent disk
      fsType:
        type: string
        description: |-
          fsType is the filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    description: Represents a Photon Controller persistent disk resource.
  k8s.io.api.core.v1.PodAffinity:
    type: object
    properties:
      requiredDuringSchedulingIgnoredDuringExecution:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.PodAffinityTerm'
        title: |-
          If the affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node.
          If the affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to a pod label update), the
          system may or may not try to eventually evict the pod from its node.
          When there are multiple elements, the lists of nodes corresponding to each
          podAffinityTerm are intersected, i.e. all terms must be satisfied.
          +optional
      preferredDuringSchedulingIgnoredDuringExecution:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.WeightedPodAffinityTerm'
        title: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
          node(s) with the highest sum are the most preferred.
          +optional
    description: Pod affinity is a group of inter pod affinity scheduling rules.
  k8s.io.api.core.v1.PodAffinityTerm:
    type: object
    properties:
      labelSelector:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector'
        title: |-
          A label query over a set of resources, in this case pods.
          If it's null, this PodAffinityTerm matches with no Pods.
          +optional
      namespaces:
        type: array
        items:
          type: string
        title: |-
          namespaces specifies a static list of namespace names that the term applies to.
          The term is applied to the union of the namespaces listed in this field
          and the ones selected by namespaceSelector.
          null or empty namespaces list and null namespaceSelector means "this pod's namespace".
          +optional
      topologyKey:
        type: string
        description: |-
          This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
          the labelSelector in the specified namespaces, where co-located is defined as running on a node
          whose value of the label with key topologyKey matches that of any node on which any of the
          selected pods is running.
          Empty topologyKey is not allowed.
      namespaceSelector:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector'
        title: |-
          A label query over the set of namespaces that the term applies to.
          The term is applied to the union of the namespaces selected by this field
          and the ones listed in the namespaces field.
          null selector and null or empty namespaces list means "this pod's namespace".
          An empty selector ({}) matches all namespaces.
          +optional
      matchLabelKeys:
        type: array
        items:
          type: string
        title: |-
          MatchLabelKeys is a set of pod label keys to select which pods will
          be taken into consideration. The keys are used to lookup values from the
          incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
          to select the group of existing pods which pods will be taken into consideration
          for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
          pod labels will be ignored. The default value is empty.
          The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
          Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
          This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
          +listType=atomic
          +optional
      mismatchLabelKeys:
        type: array
        items:
          type: string
        title: |-
          MismatchLabelKeys is a set of pod label keys to select which pods will
          be taken into consideration. The keys are used to lookup values from the
          incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
          to select the group of existing pods which pods will be taken into consideration
          for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
          pod labels will be ignored. The default value is empty.
          The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
          Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
          This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
          +listType=atomic
          +optional
    title: |-
      Defines a set of pods (namely those matching the labelSelector
      relative to the given namespace(s)) that this pod should be
      co-located (affinity) or not co-located (anti-affinity) with,
      where co-located is defined as running on a node whose value of
      the label with key <topologyKey> matches that of any node on which
      a pod of the set of pods is running
  k8s.io.api.core.v1.PodAntiAffinity:
    type: object
    properties:
      requiredDuringSchedulingIgnoredDuringExecution:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.PodAffinityTerm'
        title: |-
          If the anti-affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node.
          If the anti-affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to a pod label update), the
          system may or may not try to eventually evict the pod from its node.
          When there are multiple elements, the lists of nodes corresponding to each
          podAffinityTerm are intersected, i.e. all terms must be satisfied.
          +optional
      preferredDuringSchedulingIgnoredDuringExecution:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.WeightedPodAffinityTerm'
        title: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the anti-affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling anti-affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
          node(s) with the highest sum are the most preferred.
          +optional
    description: Pod anti affinity is a group of inter pod anti affinity scheduling rules.
  k8s.io.api.core.v1.PodDNSConfig:
    type: object
    properties:
      nameservers:
        type: array
        items:
          type: string
        title: |-
          A list of DNS name server IP addresses.
          This will be appended to the base nameservers generated from DNSPolicy.
          Duplicated nameservers will be removed.
          +optional
      searches:
        type: array
        items:
          type: string
        title: |-
          A list of DNS search domains for host-name lookup.
          This will be appended to the base search paths generated from DNSPolicy.
          Duplicated search paths will be removed.
          +optional
      options:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.PodDNSConfigOption'
        title: |-
          A list of DNS resolver options.
          This will be merged with the base options generated from DNSPolicy.
          Duplicated entries will be removed. Resolution options given in Options
          will override those that appear in the base DNSPolicy.
          +optional
    description: |-
      PodDNSConfig defines the DNS parameters of a pod in addition to
      those generated from DNSPolicy.
  k8s.io.api.core.v1.PodDNSConfigOption:
    type: object
    properties:
      name:
        type: string
        description: Required.
      value:
        type: string
        title: +optional
    description: PodDNSConfigOption defines DNS resolver options of a pod.
  k8s.io.api.core.v1.PodOS:
    type: object
    properties:
      name:
        type: string
        title: |-
          Name is the name of the operating system. The currently supported values are linux and windows.
          Additional value may be defined in future and can be one of:
          https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration
          Clients should expect to handle additional values and treat unrecognized values in this field as os: null
    description: PodOS defines the OS parameters of a pod.
  k8s.io.api.core.v1.PodReadinessGate:
    type: object
    properties:
      conditionType:
        type: string
        description: ConditionType refers to a condition in the pod's condition list with matching type.
    title: PodReadinessGate contains the reference to a pod condition
  k8s.io.api.core.v1.PodResourceClaim:
    type: object
    properties:
      name:
        type: string
        description: |-
          Name uniquely identifies this resource claim inside the pod.
          This must be a DNS_LABEL.
      source:
        $ref: '#/definitions/k8s.io.api.core.v1.ClaimSource'
        description: Source describes where to find the ResourceClaim.
    description: |-
      PodResourceClaim references exactly one ResourceClaim through a ClaimSource.
      It adds a name to it that uniquely identifies the ResourceClaim inside the Pod.
      Containers that need access to the ResourceClaim reference it with this name.
  k8s.io.api.core.v1.PodSchedulingGate:
    type: object
    properties:
      name:
        type: string
        description: |-
          Name of the scheduling gate.
          Each scheduling gate must have a unique name field.
    description: PodSchedulingGate is associated to a Pod to guard its scheduling.
  k8s.io.api.core.v1.PodSecurityContext:
    type: object
    properties:
      seLinuxOptions:
        $ref: '#/definitions/k8s.io.api.core.v1.SELinuxOptions'
        title: |-
          The SELinux context to be applied to all containers.
          If unspecified, the container runtime will allocate a random SELinux context for each
          container.  May also be set in SecurityContext.  If set in
          both SecurityContext and PodSecurityContext, the value specified in SecurityContext
          takes precedence for that container.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      windowsOptions:
        $ref: '#/definitions/k8s.io.api.core.v1.WindowsSecurityContextOptions'
        title: |-
          The Windows specific settings applied to all containers.
          If unspecified, the options within a container's SecurityContext will be used.
          If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          Note that this field cannot be set when spec.os.name is linux.
          +optional
      runAsUser:
        type: string
        format: int64
        title: |-
          The UID to run the entrypoint of the container process.
          Defaults to user specified in image metadata if unspecified.
          May also be set in SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence
          for that container.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      runAsGroup:
        type: string
        format: int64
        title: |-
          The GID to run the entrypoint of the container process.
          Uses runtime default if unset.
          May also be set in SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence
          for that container.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      runAsNonRoot:
        type: boolean
        title: |-
          Indicates that the container must run as a non-root user.
          If true, the Kubelet will validate the image at runtime to ensure that it
          does not run as UID 0 (root) and fail to start the container if it does.
          If unset or false, no such validation will be performed.
          May also be set in SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
      supplementalGroups:
        type: array
        items:
          type: string
          format: int64
        title: |-
          A list of groups applied to the first process run in each container, in addition
          to the container's primary GID, the fsGroup (if specified), and group memberships
          defined in the container image for the uid of the container process. If unspecified,
          no additional groups are added to any container. Note that group memberships
          defined in the container image for the uid of the container process are still effective,
          even if they are not included in this list.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      fsGroup:
        type: string
        format: int64
        description: |-
          1. The owning GID will be the FSGroup
          2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
          3. The permission bits are OR'd with rw-rw----

          If unset, the Kubelet will not modify the ownership and permissions of any volume.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        title: |-
          A special supplemental group that applies to all containers in a pod.
          Some volume types allow the Kubelet to change the ownership of that volume
          to be owned by the pod:
      sysctls:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.Sysctl'
        title: |-
          Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
          sysctls (by the container runtime) might fail to launch.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      fsGroupChangePolicy:
        type: string
        title: |-
          fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
          before being exposed inside Pod. This field will only apply to
          volume types which support fsGroup based ownership(and permissions).
          It will have no effect on ephemeral volume types such as: secret, configmaps
          and emptydir.
          Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      seccompProfile:
        $ref: '#/definitions/k8s.io.api.core.v1.SeccompProfile'
        title: |-
          The seccomp options to use by the containers in this pod.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
    description: |-
      PodSecurityContext holds pod-level security attributes and common container settings.
      Some fields are also present in container.securityContext.  Field values of
      container.securityContext take precedence over field values of PodSecurityContext.
  k8s.io.api.core.v1.PodSpec:
    type: object
    properties:
      volumes:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.Volume'
        title: |-
          List of volumes that can be mounted by containers belonging to the pod.
          More info: https://kubernetes.io/docs/concepts/storage/volumes
          +optional
          +patchMergeKey=name
          +patchStrategy=merge,retainKeys
      initContainers:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.Container'
        title: |-
          List of initialization containers belonging to the pod.
          Init containers are executed in order prior to containers being started. If any
          init container fails, the pod is considered to have failed and is handled according
          to its restartPolicy. The name for an init container or normal container must be
          unique among all containers.
          Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.
          The resourceRequirements of an init container are taken into account during scheduling
          by finding the highest request/limit for each resource type, and then using the max of
          of that value or the sum of the normal containers. Limits are applied to init containers
          in a similar fashion.
          Init containers cannot currently be added or removed.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
          +patchMergeKey=name
          +patchStrategy=merge
      containers:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.Container'
        title: |-
          List of containers belonging to the pod.
          Containers cannot currently be added or removed.
          There must be at least one container in a Pod.
          Cannot be updated.
          +patchMergeKey=name
          +patchStrategy=merge
      ephemeralContainers:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.EphemeralContainer'
        title: |-
          List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing
          pod to perform user-initiated actions such as debugging. This list cannot be specified when
          creating a pod, and it cannot be modified by updating the pod spec. In order to add an
          ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
      restartPolicy:
        type: string
        title: |-
          Restart policy for all containers within the pod.
          One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted.
          Default to Always.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
          +optional
      terminationGracePeriodSeconds:
        type: string
        format: int64
        title: |-
          Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.
          Value must be non-negative integer. The value zero indicates stop immediately via
          the kill signal (no opportunity to shut down).
          If this value is nil, the default grace period will be used instead.
          The grace period is the duration in seconds after the processes running in the pod are sent
          a termination signal and the time when the processes are forcibly halted with a kill signal.
          Set this value longer than the expected cleanup time for your process.
          Defaults to 30 seconds.
          +optional
      activeDeadlineSeconds:
        type: string
        format: int64
        title: |-
          Optional duration in seconds the pod may be active on the node relative to
          StartTime before the system will actively try to mark it failed and kill associated containers.
          Value must be a positive integer.
          +optional
      dnsPolicy:
        type: string
        title: |-
          Set DNS policy for the pod.
          Defaults to "ClusterFirst".
          Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
          DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
          To have DNS options set along with hostNetwork, you have to specify DNS policy
          explicitly to 'ClusterFirstWithHostNet'.
          +optional
      nodeSelector:
        type: object
        additionalProperties:
          type: string
        title: |-
          NodeSelector is a selector which must be true for the pod to fit on a node.
          Selector which must match a node's labels for the pod to be scheduled on that node.
          More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
          +optional
          +mapType=atomic
      serviceAccountName:
        type: string
        title: |-
          ServiceAccountName is the name of the ServiceAccount to use to run this pod.
          More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
          +optional
      serviceAccount:
        type: string
        title: |-
          DeprecatedServiceAccount is a depreciated alias for ServiceAccountName.
          Deprecated: Use serviceAccountName instead.
          +k8s:conversion-gen=false
          +optional
      automountServiceAccountToken:
        type: boolean
        title: |-
          AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
          +optional
      nodeName:
        type: string
        title: |-
          NodeName is a request to schedule this pod onto a specific node. If it is non-empty,
          the scheduler simply schedules this pod onto that node, assuming that it fits resource
          requirements.
          +optional
      hostNetwork:
        type: boolean
        title: |-
          Host networking requested for this pod. Use the host's network namespace.
          If this option is set, the ports that will be used must be specified.
          Default to false.
          +k8s:conversion-gen=false
          +optional
      hostPID:
        type: boolean
        title: |-
          Use the host's pid namespace.
          Optional: Default to false.
          +k8s:conversion-gen=false
          +optional
      hostIPC:
        type: boolean
        title: |-
          Use the host's ipc namespace.
          Optional: Default to false.
          +k8s:conversion-gen=false
          +optional
      shareProcessNamespace:
        type: boolean
        title: |-
          Share a single process namespace between all of the containers in a pod.
          When this is set containers will be able to view and signal processes from other containers
          in the same pod, and the first process in each container will not be assigned PID 1.
          HostPID and ShareProcessNamespace cannot both be set.
          Optional: Default to false.
          +k8s:conversion-gen=false
          +optional
      securityContext:
        $ref: '#/definitions/k8s.io.api.core.v1.PodSecurityContext'
        title: |-
          SecurityContext holds pod-level security attributes and common container settings.
          Optional: Defaults to empty.  See type description for default values of each field.
          +optional
      imagePullSecrets:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.LocalObjectReference'
        title: |-
          ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
          If specified, these secrets will be passed to individual puller implementations for them to use.
          More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
      hostname:
        type: string
        title: |-
          Specifies the hostname of the Pod
          If not specified, the pod's hostname will be set to a system-defined value.
          +optional
      subdomain:
        type: string
        title: |-
          If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
          If not specified, the pod will not have a domainname at all.
          +optional
      affinity:
        $ref: '#/definitions/k8s.io.api.core.v1.Affinity'
        title: |-
          If specified, the pod's scheduling constraints
          +optional
      schedulerName:
        type: string
        title: |-
          If specified, the pod will be dispatched by specified scheduler.
          If not specified, the pod will be dispatched by default scheduler.
          +optional
      tolerations:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.Toleration'
        title: |-
          If specified, the pod's tolerations.
          +optional
      hostAliases:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.HostAlias'
        title: |-
          HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts
          file if specified. This is only valid for non-hostNetwork pods.
          +optional
          +patchMergeKey=ip
          +patchStrategy=merge
      priorityClassName:
        type: string
        title: |-
          If specified, indicates the pod's priority. "system-node-critical" and
          "system-cluster-critical" are two special keywords which indicate the
          highest priorities with the former being the highest priority. Any other
          name must be defined by creating a PriorityClass object with that name.
          If not specified, the pod priority will be default or zero if there is no
          default.
          +optional
      priority:
        type: integer
        format: int32
        title: |-
          The priority value. Various system components use this field to find the
          priority of the pod. When Priority Admission Controller is enabled, it
          prevents users from setting this field. The admission controller populates
          this field from PriorityClassName.
          The higher the value, the higher the priority.
          +optional
      dnsConfig:
        $ref: '#/definitions/k8s.io.api.core.v1.PodDNSConfig'
        title: |-
          Specifies the DNS parameters of a pod.
          Parameters specified here will be merged to the generated DNS
          configuration based on DNSPolicy.
          +optional
      readinessGates:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.PodReadinessGate'
        title: |-
          If specified, all readiness gates will be evaluated for pod readiness.
          A pod is ready when all its containers are ready AND
          all conditions specified in the readiness gates have status equal to "True"
          More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
          +optional
      runtimeClassName:
        type: string
        title: |-
          RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used
          to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run.
          If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an
          empty definition that uses the default runtime handler.
          More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
          +optional
      enableServiceLinks:
        type: boolean
        title: |-
          EnableServiceLinks indicates whether information about services should be injected into pod's
          environment variables, matching the syntax of Docker links.
          Optional: Defaults to true.
          +optional
      preemptionPolicy:
        type: string
        title: |-
          PreemptionPolicy is the Policy for preempting pods with lower priority.
          One of Never, PreemptLowerPriority.
          Defaults to PreemptLowerPriority if unset.
          +optional
      overhead:
        type: object
        additionalProperties:
          $ref: '#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity'
        title: |-
          Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.
          This field will be autopopulated at admission time by the RuntimeClass admission controller. If
          the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests.
          The RuntimeClass admission controller will reject Pod create requests which have the overhead already
          set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value
          defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero.
          More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
          +optional
      topologySpreadConstraints:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.TopologySpreadConstraint'
        title: |-
          TopologySpreadConstraints describes how a group of pods ought to spread across topology
          domains. Scheduler will schedule pods in a way which abides by the constraints.
          All topologySpreadConstraints are ANDed.
          +optional
          +patchMergeKey=topologyKey
          +patchStrategy=merge
          +listType=map
          +listMapKey=topologyKey
          +listMapKey=whenUnsatisfiable
      setHostnameAsFQDN:
        type: boolean
        title: |-
          If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default).
          In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname).
          In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN.
          If a pod does not have FQDN, this has no effect.
          Default to false.
          +optional
      os:
        $ref: '#/definitions/k8s.io.api.core.v1.PodOS'
        description: |-
          Specifies the OS of the containers in the pod.
          Some pod and container fields are restricted if this is set.

          If the OS field is set to linux, the following fields must be unset:
          -securityContext.windowsOptions

          If the OS field is set to windows, following fields must be unset:
          - spec.hostPID
          - spec.hostIPC
          - spec.hostUsers
          - spec.securityContext.seLinuxOptions
          - spec.securityContext.seccompProfile
          - spec.securityContext.fsGroup
          - spec.securityContext.fsGroupChangePolicy
          - spec.securityContext.sysctls
          - spec.shareProcessNamespace
          - spec.securityContext.runAsUser
          - spec.securityContext.runAsGroup
          - spec.securityContext.supplementalGroups
          - spec.containers[*].securityContext.seLinuxOptions
          - spec.containers[*].securityContext.seccompProfile
          - spec.containers[*].securityContext.capabilities
          - spec.containers[*].securityContext.readOnlyRootFilesystem
          - spec.containers[*].securityContext.privileged
          - spec.containers[*].securityContext.allowPrivilegeEscalation
          - spec.containers[*].securityContext.procMount
          - spec.containers[*].securityContext.runAsUser
          - spec.containers[*].securityContext.runAsGroup
          +optional
      hostUsers:
        type: boolean
        title: |-
          Use the host's user namespace.
          Optional: Default to true.
          If set to true or not present, the pod will be run in the host user namespace, useful
          for when the pod needs a feature only available to the host user namespace, such as
          loading a kernel module with CAP_SYS_MODULE.
          When set to false, a new userns is created for the pod. Setting false is useful for
          mitigating container breakout vulnerabilities even allowing users to run their
          containers as root without actually having root privileges on the host.
          This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
          +k8s:conversion-gen=false
          +optional
      schedulingGates:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.PodSchedulingGate'
        description: |-
          SchedulingGates is an opaque list of values that if specified will block scheduling the pod.
          If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the
          scheduler will not attempt to schedule the pod.

          SchedulingGates can only be set at pod creation time, and be removed only afterwards.

          This is a beta feature enabled by the PodSchedulingReadiness feature gate.

          +patchMergeKey=name
          +patchStrategy=merge
          +listType=map
          +listMapKey=name
          +featureGate=PodSchedulingReadiness
          +optional
      resourceClaims:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.PodResourceClaim'
        description: |-
          ResourceClaims defines which ResourceClaims must be allocated
          and reserved before the Pod is allowed to start. The resources
          will be made available to those containers which consume them
          by name.

          This is an alpha field and requires enabling the
          DynamicResourceAllocation feature gate.

          This field is immutable.

          +patchMergeKey=name
          +patchStrategy=merge,retainKeys
          +listType=map
          +listMapKey=name
          +featureGate=DynamicResourceAllocation
          +optional
    description: PodSpec is a description of a pod.
  k8s.io.api.core.v1.PodTemplateSpec:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        title: |-
          Standard object's metadata.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
      spec:
        $ref: '#/definitions/k8s.io.api.core.v1.PodSpec'
        title: |-
          Specification of the desired behavior of the pod.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
          +optional
    title: PodTemplateSpec describes the data a pod should have when created from a template
  k8s.io.api.core.v1.PortworxVolumeSource:
    type: object
    properties:
      volumeID:
        type: string
        title: volumeID uniquely identifies a Portworx volume
      fsType:
        type: string
        description: |-
          fSType represents the filesystem type to mount
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
      readOnly:
        type: boolean
        title: |-
          readOnly defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
    description: PortworxVolumeSource represents a Portworx volume resource.
  k8s.io.api.core.v1.PreferredSchedulingTerm:
    type: object
    properties:
      weight:
        type: integer
        format: int32
        description: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
      preference:
        $ref: '#/definitions/k8s.io.api.core.v1.NodeSelectorTerm'
        description: A node selector term, associated with the corresponding weight.
    description: |-
      An empty preferred scheduling term matches all objects with implicit weight 0
      (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
  k8s.io.api.core.v1.Probe:
    type: object
    properties:
      handler:
        $ref: '#/definitions/k8s.io.api.core.v1.ProbeHandler'
        title: The action taken to determine the health of a container
      initialDelaySeconds:
        type: integer
        format: int32
        title: |-
          Number of seconds after the container has started before liveness probes are initiated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
      timeoutSeconds:
        type: integer
        format: int32
        title: |-
          Number of seconds after which the probe times out.
          Defaults to 1 second. Minimum value is 1.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
      periodSeconds:
        type: integer
        format: int32
        title: |-
          How often (in seconds) to perform the probe.
          Default to 10 seconds. Minimum value is 1.
          +optional
      successThreshold:
        type: integer
        format: int32
        title: |-
          Minimum consecutive successes for the probe to be considered successful after having failed.
          Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
          +optional
      failureThreshold:
        type: integer
        format: int32
        title: |-
          Minimum consecutive failures for the probe to be considered failed after having succeeded.
          Defaults to 3. Minimum value is 1.
          +optional
      terminationGracePeriodSeconds:
        type: string
        format: int64
        title: |-
          Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
          The grace period is the duration in seconds after the processes running in the pod are sent
          a termination signal and the time when the processes are forcibly halted with a kill signal.
          Set this value longer than the expected cleanup time for your process.
          If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
          value overrides the value provided by the pod spec.
          Value must be non-negative integer. The value zero indicates stop immediately via
          the kill signal (no opportunity to shut down).
          This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
          Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
          +optional
    description: |-
      Probe describes a health check to be performed against a container to determine whether it is
      alive or ready to receive traffic.
  k8s.io.api.core.v1.ProbeHandler:
    type: object
    properties:
      exec:
        $ref: '#/definitions/k8s.io.api.core.v1.ExecAction'
        title: |-
          Exec specifies the action to take.
          +optional
      httpGet:
        $ref: '#/definitions/k8s.io.api.core.v1.HTTPGetAction'
        title: |-
          HTTPGet specifies the http request to perform.
          +optional
      tcpSocket:
        $ref: '#/definitions/k8s.io.api.core.v1.TCPSocketAction'
        title: |-
          TCPSocket specifies an action involving a TCP port.
          +optional
      grpc:
        $ref: '#/definitions/k8s.io.api.core.v1.GRPCAction'
        title: |-
          GRPC specifies an action involving a GRPC port.
          +optional
    description: |-
      ProbeHandler defines a specific action that should be taken in a probe.
      One and only one of the fields must be specified.
  k8s.io.api.core.v1.ProjectedVolumeSource:
    type: object
    properties:
      sources:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.VolumeProjection'
        title: |-
          sources is the list of volume projections
          +optional
      defaultMode:
        type: integer
        format: int32
        title: |-
          defaultMode are the mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
    title: Represents a projected volume source
  k8s.io.api.core.v1.QuobyteVolumeSource:
    type: object
    properties:
      registry:
        type: string
        title: |-
          registry represents a single or multiple Quobyte Registry services
          specified as a string as host:port pair (multiple entries are separated with commas)
          which acts as the central registry for volumes
      volume:
        type: string
        description: volume is a string that references an already created Quobyte volume by name.
      readOnly:
        type: boolean
        title: |-
          readOnly here will force the Quobyte volume to be mounted with read-only permissions.
          Defaults to false.
          +optional
      user:
        type: string
        title: |-
          user to map volume access to
          Defaults to serivceaccount user
          +optional
      group:
        type: string
        title: |-
          group to map volume access to
          Default is no group
          +optional
      tenant:
        type: string
        title: |-
          tenant owning the given Quobyte volume in the Backend
          Used with dynamically provisioned Quobyte volumes, value is set by the plugin
          +optional
    description: |-
      Represents a Quobyte mount that lasts the lifetime of a pod.
      Quobyte volumes do not support ownership management or SELinux relabeling.
  k8s.io.api.core.v1.RBDVolumeSource:
    type: object
    properties:
      monitors:
        type: array
        items:
          type: string
        title: |-
          monitors is a collection of Ceph monitors.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
      image:
        type: string
        title: |-
          image is the rados image name.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
      fsType:
        type: string
        title: |-
          fsType is the filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
      pool:
        type: string
        title: |-
          pool is the rados pool name.
          Default is rbd.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
      user:
        type: string
        title: |-
          user is the rados user name.
          Default is admin.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
      keyring:
        type: string
        title: |-
          keyring is the path to key ring for RBDUser.
          Default is /etc/ceph/keyring.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
      secretRef:
        $ref: '#/definitions/k8s.io.api.core.v1.LocalObjectReference'
        title: |-
          secretRef is name of the authentication secret for RBDUser. If provided
          overrides keyring.
          Default is nil.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
      readOnly:
        type: boolean
        title: |-
          readOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
    description: |-
      Represents a Rados Block Device mount that lasts the lifetime of a pod.
      RBD volumes support ownership management and SELinux relabeling.
  k8s.io.api.core.v1.ResourceClaim:
    type: object
    properties:
      name:
        type: string
        description: |-
          Name must match the name of one entry in pod.spec.resourceClaims of
          the Pod where this field is used. It makes that resource available
          inside a container.
    description: ResourceClaim references one entry in PodSpec.ResourceClaims.
  k8s.io.api.core.v1.ResourceFieldSelector:
    type: object
    properties:
      containerName:
        type: string
        title: |-
          Container name: required for volumes, optional for env vars
          +optional
      resource:
        type: string
        title: 'Required: resource to select'
      divisor:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity'
        title: |-
          Specifies the output format of the exposed resources, defaults to "1"
          +optional
    title: |-
      ResourceFieldSelector represents container resources (cpu, memory) and their output format
      +structType=atomic
  k8s.io.api.core.v1.ResourceRequirements:
    type: object
    properties:
      limits:
        type: object
        additionalProperties:
          $ref: '#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity'
        title: |-
          Limits describes the maximum amount of compute resources allowed.
          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          +optional
      requests:
        type: object
        additionalProperties:
          $ref: '#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity'
        title: |-
          Requests describes the minimum amount of compute resources required.
          If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
          otherwise to an implementation-defined value. Requests cannot exceed Limits.
          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          +optional
      claims:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.ResourceClaim'
        description: |-
          Claims lists the names of resources, defined in spec.resourceClaims,
          that are used by this container.

          This is an alpha field and requires enabling the
          DynamicResourceAllocation feature gate.

          This field is immutable. It can only be set for containers.

          +listType=map
          +listMapKey=name
          +featureGate=DynamicResourceAllocation
          +optional
    description: ResourceRequirements describes the compute resource requirements.
  k8s.io.api.core.v1.SELinuxOptions:
    type: object
    properties:
      user:
        type: string
        title: |-
          User is a SELinux user label that applies to the container.
          +optional
      role:
        type: string
        title: |-
          Role is a SELinux role label that applies to the container.
          +optional
      type:
        type: string
        title: |-
          Type is a SELinux type label that applies to the container.
          +optional
      level:
        type: string
        title: |-
          Level is SELinux level label that applies to the container.
          +optional
    title: SELinuxOptions are the labels to be applied to the container
  k8s.io.api.core.v1.ScaleIOVolumeSource:
    type: object
    properties:
      gateway:
        type: string
        description: gateway is the host address of the ScaleIO API Gateway.
      system:
        type: string
        description: system is the name of the storage system as configured in ScaleIO.
      secretRef:
        $ref: '#/definitions/k8s.io.api.core.v1.LocalObjectReference'
        description: |-
          secretRef references to the secret for ScaleIO user and other
          sensitive information. If this is not provided, Login operation will fail.
      sslEnabled:
        type: boolean
        title: |-
          sslEnabled Flag enable/disable SSL communication with Gateway, default false
          +optional
      protectionDomain:
        type: string
        title: |-
          protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
          +optional
      storagePool:
        type: string
        title: |-
          storagePool is the ScaleIO Storage Pool associated with the protection domain.
          +optional
      storageMode:
        type: string
        title: |-
          storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
          Default is ThinProvisioned.
          +optional
      volumeName:
        type: string
        description: |-
          volumeName is the name of a volume already created in the ScaleIO system
          that is associated with this volume source.
      fsType:
        type: string
        title: |-
          fsType is the filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs".
          Default is "xfs".
          +optional
      readOnly:
        type: boolean
        title: |-
          readOnly Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
    title: ScaleIOVolumeSource represents a persistent ScaleIO volume
  k8s.io.api.core.v1.SeccompProfile:
    type: object
    properties:
      type:
        type: string
        description: |-
          Localhost - a profile defined in a file on the node should be used.
          RuntimeDefault - the container runtime default profile should be used.
          Unconfined - no profile should be applied.
          +unionDiscriminator
        title: |-
          type indicates which kind of seccomp profile will be applied.
          Valid options are:
      localhostProfile:
        type: string
        title: |-
          localhostProfile indicates a profile defined in a file on the node should be used.
          The profile must be preconfigured on the node to work.
          Must be a descending path, relative to the kubelet's configured seccomp profile location.
          Must be set if type is "Localhost". Must NOT be set for any other type.
          +optional
    title: |-
      SeccompProfile defines a pod/container's seccomp profile settings.
      Only one profile source may be set.
      +union
  k8s.io.api.core.v1.SecretEnvSource:
    type: object
    properties:
      localObjectReference:
        $ref: '#/definitions/k8s.io.api.core.v1.LocalObjectReference'
        description: The Secret to select from.
      optional:
        type: boolean
        title: |-
          Specify whether the Secret must be defined
          +optional
    description: |-
      SecretEnvSource selects a Secret to populate the environment
      variables with.

      The contents of the target Secret's Data field will represent the
      key-value pairs as environment variables.
  k8s.io.api.core.v1.SecretKeySelector:
    type: object
    properties:
      localObjectReference:
        $ref: '#/definitions/k8s.io.api.core.v1.LocalObjectReference'
        description: The name of the secret in the pod's namespace to select from.
      key:
        type: string
        description: The key of the secret to select from.  Must be a valid secret key.
      optional:
        type: boolean
        title: |-
          Specify whether the Secret or its key must be defined
          +optional
    title: |-
      SecretKeySelector selects a key of a Secret.
      +structType=atomic
  k8s.io.api.core.v1.SecretProjection:
    type: object
    properties:
      localObjectReference:
        $ref: '#/definitions/k8s.io.api.core.v1.LocalObjectReference'
      items:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.KeyToPath'
        title: |-
          items if unspecified, each key-value pair in the Data field of the referenced
          Secret will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the Secret,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
      optional:
        type: boolean
        title: |-
          optional field specify whether the Secret or its key must be defined
          +optional
    description: |-
      Adapts a secret into a projected volume.

      The contents of the target Secret's Data field will be presented in a
      projected volume as files using the keys in the Data field as the file names.
      Note that this is identical to a secret volume source without the default
      mode.
  k8s.io.api.core.v1.SecretVolumeSource:
    type: object
    properties:
      secretName:
        type: string
        title: |-
          secretName is the name of the secret in the pod's namespace to use.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
          +optional
      items:
        type: array
        items:
          $ref: '#/definitions/k8s.io.api.core.v1.KeyToPath'
        title: |-
          items If unspecified, each key-value pair in the Data field of the referenced
          Secret will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the Secret,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
      defaultMode:
        type: integer
        format: int32
        title: |-
          defaultMode is Optional: mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values
          for mode bits. Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
      optional:
        type: boolean
        title: |-
          optional field specify whether the Secret or its keys must be defined
          +optional
    description: |-
      Adapts a Secret into a volume.

      The contents of the target Secret's Data field will be presented in a volume
      as files using the keys in the Data field as the file names.
      Secret volumes support ownership management and SELinux relabeling.
  k8s.io.api.core.v1.SecurityContext:
    type: object
    properties:
      capabilities:
        $ref: '#/definitions/k8s.io.api.core.v1.Capabilities'
        title: |-
          The capabilities to add/drop when running containers.
          Defaults to the default set of capabilities granted by the container runtime.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      privileged:
        type: boolean
        title: |-
          Run container in privileged mode.
          Processes in privileged containers are essentially equivalent to root on the host.
          Defaults to false.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      seLinuxOptions:
        $ref: '#/definitions/k8s.io.api.core.v1.SELinuxOptions'
        title: |-
          The SELinux context to be applied to the container.
          If unspecified, the container runtime will allocate a random SELinux context for each
          container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      windowsOptions:
        $ref: '#/definitions/k8s.io.api.core.v1.WindowsSecurityContextOptions'
        title: |-
          The Windows specific settings applied to all containers.
          If unspecified, the options from the PodSecurityContext will be used.
          If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          Note that this field cannot be set when spec.os.name is linux.
          +optional
      runAsUser:
        type: string
        format: int64
        title: |-
          The UID to run the entrypoint of the container process.
          Defaults to user specified in image metadata if unspecified.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      runAsGroup:
        type: string
        format: int64
        title: |-
          The GID to run the entrypoint of the container process.
          Uses runtime default if unset.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      runAsNonRoot:
        type: boolean
        title: |-
          Indicates that the container must run as a non-root user.
          If true, the Kubelet will validate the image at runtime to ensure that it
          does not run as UID 0 (root) and fail to start the container if it does.
          If unset or false, no such validation will be performed.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
      readOnlyRootFilesystem:
        type: boolean
        title: |-
          Whether this container has a read-only root filesystem.
          Default is false.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      allowPrivilegeEscalation:
        type: boolean
        title: |-
          AllowPrivilegeEscalation controls whether a process can gain more
          privileges than its parent process. This bool directly controls if
          the no_new_privs flag will be set on the container process.
          AllowPrivilegeEscalation is true always when the container is:
          1) run as Privileged
          2) has CAP_SYS_ADMIN
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      procMount:
        type: string
        title: |-
          procMount denotes the type of proc mount to use for the containers.
          The default is DefaultProcMount which uses the container runtime defaults for
          readonly paths and masked paths.
          This requires the ProcMountType feature flag to be enabled.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      seccompProfile:
        $ref: '#/definitions/k8s.io.api.core.v1.SeccompProfile'
        title: |-
          The seccomp options to use by this container. If seccomp options are
          provided at both the pod & container level, the container options
          override the pod options.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
    description: |-
      SecurityContext holds security configuration that will be applied to a container.
      Some fields are present in both SecurityContext and PodSecurityContext.  When both
      are set, the values in SecurityContext take precedence.
  k8s.io.api.core.v1.ServiceAccountTokenProjection:
    type: object
    properties:
      audience:
        type: string
        title: |-
          audience is the intended audience of the token. A recipient of a token
          must identify itself with an identifier specified in the audience of the
          token, and otherwise should reject the token. The audience defaults to the
          identifier of the apiserver.
          +optional
      expirationSeconds:
        type: string
        format: int64
        title: |-
          expirationSeconds is the requested duration of validity of the service
          account token. As the token approaches expiration, the kubelet volume
          plugin will proactively rotate the service account token. The kubelet will
          start trying to rotate the token if the token is older than 80 percent of
          its time to live or if the token is older than 24 hours.Defaults to 1 hour
          and must be at least 10 minutes.
          +optional
      path:
        type: string
        description: |-
          path is the path relative to the mount point of the file to project the
          token into.
    description: |-
      ServiceAccountTokenProjection represents a projected service account token
      volume. This projection can be used to insert a service account token into
      the pods runtime filesystem for use against APIs (Kubernetes API Server or
      otherwise).
  k8s.io.api.core.v1.SleepAction:
    type: object
    properties:
      seconds:
        type: string
        format: int64
        description: Seconds is the number of seconds to sleep.
    description: SleepAction describes a "sleep" action.
  k8s.io.api.core.v1.StorageOSVolumeSource:
    type: object
    properties:
      volumeName:
        type: string
        description: |-
          volumeName is the human-readable name of the StorageOS volume.  Volume
          names are only unique within a namespace.
      volumeNamespace:
        type: string
        title: |-
          volumeNamespace specifies the scope of the volume within StorageOS.  If no
          namespace is specified then the Pod's namespace will be used.  This allows the
          Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
          Set VolumeName to any name to override the default behaviour.
          Set to "default" if you are not using namespaces within StorageOS.
          Namespaces that do not pre-exist within StorageOS will be created.
          +optional
      fsType:
        type: string
        title: |-
          fsType is the filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          +optional
      readOnly:
        type: boolean
        title: |-
          readOnly defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
      secretRef:
        $ref: '#/definitions/k8s.io.api.core.v1.LocalObjectReference'
        title: |-
          secretRef specifies the secret to use for obtaining the StorageOS API
          credentials.  If not specified, default values will be attempted.
          +optional
    description: Represents a StorageOS persistent volume resource.
  k8s.io.api.core.v1.Sysctl:
    type: object
    properties:
      name:
        type: string
        title: Name of a property to set
      value:
        type: string
        title: Value of a property to set
    title: Sysctl defines a kernel parameter to be set
  k8s.io.api.core.v1.TCPSocketAction:
    type: object
    properties:
      port:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.util.intstr.IntOrString'
        description: |-
          Number or name of the port to access on the container.
          Number must be in the range 1 to 65535.
          Name must be an IANA_SVC_NAME.
      host:
        type: string
        title: |-
          Optional: Host name to connect to, defaults to the pod IP.
          +optional
    title: TCPSocketAction describes an action based on opening a socket
  k8s.io.api.core.v1.Toleration:
    type: object
    properties:
      key:
        type: string
        title: |-
          Key is the taint key that the toleration applies to. Empty means match all taint keys.
          If the key is empty, operator must be Exists; this combination means to match all values and all keys.
          +optional
      operator:
        type: string
        title: |-
          Operator represents a key's relationship to the value.
          Valid operators are Exists and Equal. Defaults to Equal.
          Exists is equivalent to wildcard for value, so that a pod can
          tolerate all taints of a particular category.
          +optional
      value:
        type: string
        title: |-
          Value is the taint value the toleration matches to.
          If the operator is Exists, the value should be empty, otherwise just a regular string.
          +optional
      effect:
        type: string
        title: |-
          Effect indicates the taint effect to match. Empty means match all taint effects.
          When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
          +optional
      tolerationSeconds:
        type: string
        format: int64
        title: |-
          TolerationSeconds represents the period of time the toleration (which must be
          of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
          it is not set, which means tolerate the taint forever (do not evict). Zero and
          negative values will be treated as 0 (evict immediately) by the system.
          +optional
    description: |-
      The pod this Toleration is attached to tolerates any taint that matches
      the triple <key,value,effect> using the matching operator <operator>.
  k8s.io.api.core.v1.TopologySpreadConstraint:
    type: object
    properties:
      maxSkew:
        type: integer
        format: int32
        description: |-
          MaxSkew describes the degree to which pods may be unevenly distributed.
          When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
          between the number of matching pods in the target topology and the global minimum.
          The global minimum is the minimum number of matching pods in an eligible domain
          or zero if the number of eligible domains is less than MinDomains.
          For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
          labelSelector spread as 2/2/1:
          In this case, the global minimum is 1.
          +-------+-------+-------+
          | zone1 | zone2 | zone3 |
          +-------+-------+-------+
          |  P P  |  P P  |   P   |
          +-------+-------+-------+
          - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
          scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
          violate MaxSkew(1).
          - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
          When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
          to topologies that satisfy it.
          It's a required field. Default value is 1 and 0 is not allowed.
      topologyKey:
        type: string
        description: |-
          TopologyKey is the key of node labels. Nodes that have a label with this key
          and identical values are considered to be in the same topology.
          We consider each <key, value> as a "bucket", and try to put balanced number
          of pods into each bucket.
          We define a domain as a particular instance of a topology.
          Also, we define an eligible domain as a domain whose nodes meet the requirements of
          nodeAffinityPolicy and nodeTaintsPolicy.
          e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
          And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
          It's a required field.
      whenUnsatisfiable:
        type: string
        description: |-
          WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
          the spread constraint.
          - DoNotSchedule (default) tells the scheduler not to schedule it.
          - ScheduleAnyway tells the scheduler to schedule the pod in any location,
            but giving higher precedence to topologies that would help reduce the
            skew.
          A constraint is considered "Unsatisfiable" for an incoming pod
          if and only if every possible node assignment for that pod would violate
          "MaxSkew" on some topology.
          For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
          labelSelector spread as 3/1/1:
          +-------+-------+-------+
          | zone1 | zone2 | zone3 |
          +-------+-------+-------+
          | P P P |   P   |   P   |
          +-------+-------+-------+
          If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
          to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
          MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
          won't make it *more* imbalanced.
          It's a required field.
      labelSelector:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector'
        title: |-
          LabelSelector is used to find matching pods.
          Pods that match this label selector are counted to determine the number of pods
          in their corresponding topology domain.
          +optional
      minDomains:
        type: integer
        format: int32
        description: |-
          MinDomains indicates a minimum number of eligible domains.
          When the number of eligible domains with matching topology keys is less than minDomains,
          Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
          And when the number of eligible domains with matching topology keys equals or greater than minDomains,
          this value has no effect on scheduling.
          As a result, when the number of eligible domains is less than minDomains,
          scheduler won't schedule more than maxSkew Pods to those domains.
          If value is nil, the constraint behaves as if MinDomains is equal to 1.
          Valid values are integers greater than 0.
          When value is not nil, WhenUnsatisfiable must be DoNotSchedule.

          For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
          labelSelector spread as 2/2/2:
          +-------+-------+-------+
          | zone1 | zone2 | zone3 |
          +-------+-------+-------+
          |  P P  |  P P  |  P P  |
          +-------+-------+-------+
          The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
          In this situation, new pod with the same labelSelector cannot be scheduled,
          because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
          it will violate MaxSkew.

          This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
          +optional
      nodeAffinityPolicy:
        type: string
        description: |-
          NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
          when calculating pod topology spread skew. Options are:
          - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
          - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.

          If this value is nil, the behavior is equivalent to the Honor policy.
          This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
          +optional
      nodeTaintsPolicy:
        type: string
        description: |-
          NodeTaintsPolicy indicates how we will treat node taints when calculating
          pod topology spread skew. Options are:
          - Honor: nodes without taints, along with tainted nodes for which the incoming pod
          has a toleration, are included.
          - Ignore: node taints are ignored. All nodes are included.

          If this value is nil, the behavior is equivalent to the Ignore policy.
          This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
          +optional
      matchLabelKeys:
        type: array
        items:
          type: string
        description: |-
          MatchLabelKeys is a set of pod label keys to select the pods over which
          spreading will be calculated. The keys are used to lookup values from the
          incoming pod labels, those key-value labels are ANDed with labelSelector
          to select the group of existing pods over which spreading will be calculated
          for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
          MatchLabelKeys cannot be set when LabelSelector isn't set.
          Keys that don't exist in the incoming pod labels will
          be ignored. A null or empty list means only match against labelSelector.

          This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
          +listType=atomic
          +optional
    description: TopologySpreadConstraint specifies how to spread matching pods among the given topology.
  k8s.io.api.core.v1.TypedLocalObjectReference:
    type: object
    properties:
      apiGroup:
        type: string
        title: |-
          APIGroup is the group for the resource being referenced.
          If APIGroup is not specified, the specified Kind must be in the core API group.
          For any other third-party types, APIGroup is required.
          +optional
      kind:
        type: string
        title: Kind is the type of resource being referenced
      name:
        type: string
        title: Name is the name of resource being referenced
    title: |-
      TypedLocalObjectReference contains enough information to let you locate the
      typed referenced object inside the same namespace.
      +structType=atomic
  k8s.io.api.core.v1.TypedObjectReference:
    type: object
    properties:
      apiGroup:
        type: string
        title: |-
          APIGroup is the group for the resource being referenced.
          If APIGroup is not specified, the specified Kind must be in the core API group.
          For any other third-party types, APIGroup is required.
          +optional
      kind:
        type: string
        title: Kind is the type of resource being referenced
      name:
        type: string
        title: Name is the name of resource being referenced
      namespace:
        type: string
        title: |-
          Namespace is the namespace of resource being referenced
          Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
          (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
          +featureGate=CrossNamespaceVolumeDataSource
          +optional
  k8s.io.api.core.v1.Volume:
    type: object
    properties:
      name:
        type: string
        title: |-
          name of the volume.
          Must be a DNS_LABEL and unique within the pod.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
      volumeSource:
        $ref: '#/definitions/k8s.io.api.core.v1.VolumeSource'
        description: |-
          volumeSource represents the location and type of the mounted volume.
          If not specified, the Volume is implied to be an EmptyDir.
          This implied behavior is deprecated and will be removed in a future version.
    description: Volume represents a named volume in a pod that may be accessed by any container in the pod.
  k8s.io.api.core.v1.VolumeDevice:
    type: object
    properties:
      name:
        type: string
        title: name must match the name of a persistentVolumeClaim in the pod
      devicePath:
        type: string
        description: devicePath is the path inside of the container that the device will be mapped to.
    description: volumeDevice describes a mapping of a raw block device within a container.
  k8s.io.api.core.v1.VolumeMount:
    type: object
    properties:
      name:
        type: string
        description: This must match the Name of a Volume.
      readOnly:
        type: boolean
        title: |-
          Mounted read-only if true, read-write otherwise (false or unspecified).
          Defaults to false.
          +optional
      mountPath:
        type: string
        description: |-
          Path within the container at which the volume should be mounted.  Must
          not contain ':'.
      subPath:
        type: string
        title: |-
          Path within the volume from which the container's volume should be mounted.
          Defaults to "" (volume's root).
          +optional
      mountPropagation:
        type: string
        title: |-
          mountPropagation determines how mounts are propagated from the host
          to container and the other way around.
          When not set, MountPropagationNone is used.
          This field is beta in 1.10.
          +optional
      subPathExpr:
        type: string
        title: |-
          Expanded path within the volume from which the container's volume should be mounted.
          Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
          Defaults to "" (volume's root).
          SubPathExpr and SubPath are mutually exclusive.
          +optional
    description: VolumeMount describes a mounting of a Volume within a container.
  k8s.io.api.core.v1.VolumeProjection:
    type: object
    properties:
      secret:
        $ref: '#/definitions/k8s.io.api.core.v1.SecretProjection'
        title: |-
          secret information about the secret data to project
          +optional
      downwardAPI:
        $ref: '#/definitions/k8s.io.api.core.v1.DownwardAPIProjection'
        title: |-
          downwardAPI information about the downwardAPI data to project
          +optional
      configMap:
        $ref: '#/definitions/k8s.io.api.core.v1.ConfigMapProjection'
        title: |-
          configMap information about the configMap data to project
          +optional
      serviceAccountToken:
        $ref: '#/definitions/k8s.io.api.core.v1.ServiceAccountTokenProjection'
        title: |-
          serviceAccountToken is information about the serviceAccountToken data to project
          +optional
      clusterTrustBundle:
        $ref: '#/definitions/k8s.io.api.core.v1.ClusterTrustBundleProjection'
        description: |-
          ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
          of ClusterTrustBundle objects in an auto-updating file.

          Alpha, gated by the ClusterTrustBundleProjection feature gate.

          ClusterTrustBundle objects can either be selected by name, or by the
          combination of signer name and a label selector.

          Kubelet performs aggressive normalization of the PEM contents written
          into the pod filesystem.  Esoteric PEM features such as inter-block
          comments and block headers are stripped.  Certificates are deduplicated.
          The ordering of certificates within the file is arbitrary, and Kubelet
          may change the order over time.

          +featureGate=ClusterTrustBundleProjection
          +optional
    title: Projection that may be projected along with other supported volume types
  k8s.io.api.core.v1.VolumeResourceRequirements:
    type: object
    properties:
      limits:
        type: object
        additionalProperties:
          $ref: '#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity'
        title: |-
          Limits describes the maximum amount of compute resources allowed.
          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          +optional
      requests:
        type: object
        additionalProperties:
          $ref: '#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity'
        title: |-
          Requests describes the minimum amount of compute resources required.
          If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
          otherwise to an implementation-defined value. Requests cannot exceed Limits.
          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          +optional
    description: VolumeResourceRequirements describes the storage resource requirements for a volume.
  k8s.io.api.core.v1.VolumeSource:
    type: object
    properties:
      hostPath:
        $ref: '#/definitions/k8s.io.api.core.v1.HostPathVolumeSource'
        title: |-
          hostPath represents a pre-existing file or directory on the host
          machine that is directly exposed to the container. This is generally
          used for system agents or other privileged things that are allowed
          to see the host machine. Most containers will NOT need this.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
          ---
          TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not
          mount host directories as read/write.
          +optional
      emptyDir:
        $ref: '#/definitions/k8s.io.api.core.v1.EmptyDirVolumeSource'
        title: |-
          emptyDir represents a temporary directory that shares a pod's lifetime.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
          +optional
      gcePersistentDisk:
        $ref: '#/definitions/k8s.io.api.core.v1.GCEPersistentDiskVolumeSource'
        title: |-
          gcePersistentDisk represents a GCE Disk resource that is attached to a
          kubelet's host machine and then exposed to the pod.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          +optional
      awsElasticBlockStore:
        $ref: '#/definitions/k8s.io.api.core.v1.AWSElasticBlockStoreVolumeSource'
        title: |-
          awsElasticBlockStore represents an AWS Disk resource that is attached to a
          kubelet's host machine and then exposed to the pod.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
          +optional
      gitRepo:
        $ref: '#/definitions/k8s.io.api.core.v1.GitRepoVolumeSource'
        title: |-
          gitRepo represents a git repository at a particular revision.
          DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an
          EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
          into the Pod's container.
          +optional
      secret:
        $ref: '#/definitions/k8s.io.api.core.v1.SecretVolumeSource'
        title: |-
          secret represents a secret that should populate this volume.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
          +optional
      nfs:
        $ref: '#/definitions/k8s.io.api.core.v1.NFSVolumeSource'
        title: |-
          nfs represents an NFS mount on the host that shares a pod's lifetime
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
          +optional
      iscsi:
        $ref: '#/definitions/k8s.io.api.core.v1.ISCSIVolumeSource'
        title: |-
          iscsi represents an ISCSI Disk resource that is attached to a
          kubelet's host machine and then exposed to the pod.
          More info: https://examples.k8s.io/volumes/iscsi/README.md
          +optional
      glusterfs:
        $ref: '#/definitions/k8s.io.api.core.v1.GlusterfsVolumeSource'
        title: |-
          glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md
          +optional
      persistentVolumeClaim:
        $ref: '#/definitions/k8s.io.api.core.v1.PersistentVolumeClaimVolumeSource'
        title: |-
          persistentVolumeClaimVolumeSource represents a reference to a
          PersistentVolumeClaim in the same namespace.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
          +optional
      rbd:
        $ref: '#/definitions/k8s.io.api.core.v1.RBDVolumeSource'
        title: |-
          rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
          More info: https://examples.k8s.io/volumes/rbd/README.md
          +optional
      flexVolume:
        $ref: '#/definitions/k8s.io.api.core.v1.FlexVolumeSource'
        title: |-
          flexVolume represents a generic volume resource that is
          provisioned/attached using an exec based plugin.
          +optional
      cinder:
        $ref: '#/definitions/k8s.io.api.core.v1.CinderVolumeSource'
        title: |-
          cinder represents a cinder volume attached and mounted on kubelets host machine.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
          +optional
      cephfs:
        $ref: '#/definitions/k8s.io.api.core.v1.CephFSVolumeSource'
        title: |-
          cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
          +optional
      flocker:
        $ref: '#/definitions/k8s.io.api.core.v1.FlockerVolumeSource'
        title: |-
          flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
          +optional
      downwardAPI:
        $ref: '#/definitions/k8s.io.api.core.v1.DownwardAPIVolumeSource'
        title: |-
          downwardAPI represents downward API about the pod that should populate this volume
          +optional
      fc:
        $ref: '#/definitions/k8s.io.api.core.v1.FCVolumeSource'
        title: |-
          fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
          +optional
      azureFile:
        $ref: '#/definitions/k8s.io.api.core.v1.AzureFileVolumeSource'
        title: |-
          azureFile represents an Azure File Service mount on the host and bind mount to the pod.
          +optional
      configMap:
        $ref: '#/definitions/k8s.io.api.core.v1.ConfigMapVolumeSource'
        title: |-
          configMap represents a configMap that should populate this volume
          +optional
      vsphereVolume:
        $ref: '#/definitions/k8s.io.api.core.v1.VsphereVirtualDiskVolumeSource'
        title: |-
          vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
          +optional
      quobyte:
        $ref: '#/definitions/k8s.io.api.core.v1.QuobyteVolumeSource'
        title: |-
          quobyte represents a Quobyte mount on the host that shares a pod's lifetime
          +optional
      azureDisk:
        $ref: '#/definitions/k8s.io.api.core.v1.AzureDiskVolumeSource'
        title: |-
          azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
          +optional
      photonPersistentDisk:
        $ref: '#/definitions/k8s.io.api.core.v1.PhotonPersistentDiskVolumeSource'
        title: photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
      projected:
        $ref: '#/definitions/k8s.io.api.core.v1.ProjectedVolumeSource'
        title: projected items for all in one resources secrets, configmaps, and downward API
      portworxVolume:
        $ref: '#/definitions/k8s.io.api.core.v1.PortworxVolumeSource'
        title: |-
          portworxVolume represents a portworx volume attached and mounted on kubelets host machine
          +optional
      scaleIO:
        $ref: '#/definitions/k8s.io.api.core.v1.ScaleIOVolumeSource'
        title: |-
          scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
          +optional
      storageos:
        $ref: '#/definitions/k8s.io.api.core.v1.StorageOSVolumeSource'
        title: |-
          storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
          +optional
      csi:
        $ref: '#/definitions/k8s.io.api.core.v1.CSIVolumeSource'
        title: |-
          csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
          +optional
      ephemeral:
        $ref: '#/definitions/k8s.io.api.core.v1.EphemeralVolumeSource'
        description: |-
          ephemeral represents a volume that is handled by a cluster storage driver.
          The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
          and deleted when the pod is removed.

          Use this if:
          a) the volume is only needed while the pod runs,
          b) features of normal volumes like restoring from snapshot or capacity
             tracking are needed,
          c) the storage driver is specified through a storage class, and
          d) the storage driver supports dynamic volume provisioning through
             a PersistentVolumeClaim (see EphemeralVolumeSource for more
             information on the connection between this volume type
             and PersistentVolumeClaim).

          Use PersistentVolumeClaim or one of the vendor-specific
          APIs for volumes that persist for longer than the lifecycle
          of an individual pod.

          Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
          be used that way - see the documentation of the driver for
          more information.

          A pod can use both types of ephemeral volumes and
          persistent volumes at the same time.

          +optional
    description: |-
      Represents the source of a volume to mount.
      Only one of its members may be specified.
  k8s.io.api.core.v1.VsphereVirtualDiskVolumeSource:
    type: object
    properties:
      volumePath:
        type: string
        title: volumePath is the path that identifies vSphere volume vmdk
      fsType:
        type: string
        title: |-
          fsType is filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          +optional
      storagePolicyName:
        type: string
        title: |-
          storagePolicyName is the storage Policy Based Management (SPBM) profile name.
          +optional
      storagePolicyID:
        type: string
        title: |-
          storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
          +optional
    description: Represents a vSphere volume resource.
  k8s.io.api.core.v1.WeightedPodAffinityTerm:
    type: object
    properties:
      weight:
        type: integer
        format: int32
        description: |-
          weight associated with matching the corresponding podAffinityTerm,
          in the range 1-100.
      podAffinityTerm:
        $ref: '#/definitions/k8s.io.api.core.v1.PodAffinityTerm'
        description: Required. A pod affinity term, associated with the corresponding weight.
    title: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
  k8s.io.api.core.v1.WindowsSecurityContextOptions:
    type: object
    properties:
      gmsaCredentialSpecName:
        type: string
        title: |-
          GMSACredentialSpecName is the name of the GMSA credential spec to use.
          +optional
      gmsaCredentialSpec:
        type: string
        title: |-
          GMSACredentialSpec is where the GMSA admission webhook
          (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
          GMSA credential spec named by the GMSACredentialSpecName field.
          +optional
      runAsUserName:
        type: string
        title: |-
          The UserName in Windows to run the entrypoint of the container process.
          Defaults to the user specified in image metadata if unspecified.
          May also be set in PodSecurityContext. If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
      hostProcess:
        type: boolean
        title: |-
          HostProcess determines if a container should be run as a 'Host Process' container.
          All of a Pod's containers must have the same effective HostProcess value
          (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
          In addition, if HostProcess is true then HostNetwork must also be set to true.
          +optional
    description: WindowsSecurityContextOptions contain Windows-specific options and credentials.
  k8s.io.apimachinery.pkg.api.resource.Quantity:
    type: object
    properties:
      string:
        type: string
    description: |-
      Quantity is a fixed-point representation of a number.
      It provides convenient marshaling/unmarshaling in JSON and YAML,
      in addition to String() and AsInt64() accessors.

      The serialization format is:

      ```
      <quantity>        ::= <signedNumber><suffix>

      	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)

      <digit>           ::= 0 | 1 | ... | 9
      <digits>          ::= <digit> | <digit><digits>
      <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits>
      <sign>            ::= "+" | "-"
      <signedNumber>    ::= <number> | <sign><number>
      <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI>
      <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei

      	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)

      <decimalSI>       ::= m | "" | k | M | G | T | P | E

      	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)

      <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>
      ```

      No matter which of the three exponent forms is used, no quantity may represent
      a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal
      places. Numbers larger or more precise will be capped or rounded up.
      (E.g.: 0.1m will rounded up to 1m.)
      This may be extended in the future if we require larger or smaller quantities.

      When a Quantity is parsed from a string, it will remember the type of suffix
      it had, and will use the same type again when it is serialized.

      Before serializing, Quantity will be put in "canonical form".
      This means that Exponent/suffix will be adjusted up or down (with a
      corresponding increase or decrease in Mantissa) such that:

      - No precision is lost
      - No fractional digits will be emitted
      - The exponent (or suffix) is as large as possible.

      The sign will be omitted unless the number is negative.

      Examples:

      - 1.5 will be serialized as "1500m"
      - 1.5Gi will be serialized as "1536Mi"

      Note that the quantity will NEVER be internally represented by a
      floating point number. That is the whole point of this exercise.

      Non-canonical values will still parse as long as they are well formed,
      but will be re-emitted in their canonical form. (So always use canonical
      form, or don't diff.)

      This format is intended to make it difficult to use these numbers without
      writing some sort of special handling code in the hopes that that will
      cause implementors to also use a fixed point implementation.

      +protobuf=true
      +protobuf.embed=string
      +protobuf.options.marshal=false
      +protobuf.options.(gogoproto.goproto_stringer)=false
      +k8s:deepcopy-gen=true
      +k8s:openapi-gen=true
  k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1:
    type: object
    properties:
      Raw:
        type: string
        format: byte
        description: Raw is the underlying serialization of this object.
    description: |-
      FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.

      Each key is either a '.' representing the field itself, and will always map to an empty set,
      or a string representing a sub-field or item. The string will follow one of these four formats:
      'f:<name>', where <name> is the name of a field in a struct, or key in a map
      'v:<value>', where <value> is the exact json formatted value of a list item
      'i:<index>', where <index> is position of a item in a list
      'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values
      If a key maps to an empty Fields value, the field that key represents is part of the set.

      The exact format is defined in sigs.k8s.io/structured-merge-diff
      +protobuf.options.(gogoproto.goproto_stringer)=false
  k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector:
    type: object
    properties:
      matchLabels:
        type: object
        additionalProperties:
          type: string
        title: |-
          matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
          map is equivalent to an element of matchExpressions, whose key field is "key", the
          operator is "In", and the values array contains only "value". The requirements are ANDed.
          +optional
      matchExpressions:
        type: array
        items:
          $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement'
        title: |-
          matchExpressions is a list of label selector requirements. The requirements are ANDed.
          +optional
    title: |-
      A label selector is a label query over a set of resources. The result of matchLabels and
      matchExpressions are ANDed. An empty label selector matches all objects. A null
      label selector matches no objects.
      +structType=atomic
  k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement:
    type: object
    properties:
      key:
        type: string
        description: key is the label key that the selector applies to.
      operator:
        type: string
        description: |-
          operator represents a key's relationship to a set of values.
          Valid operators are In, NotIn, Exists and DoesNotExist.
      values:
        type: array
        items:
          type: string
        title: |-
          values is an array of string values. If the operator is In or NotIn,
          the values array must be non-empty. If the operator is Exists or DoesNotExist,
          the values array must be empty. This array is replaced during a strategic
          merge patch.
          +optional
    description: |-
      A label selector requirement is a selector that contains values, a key, and an operator that
      relates the key and values.
  k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry:
    type: object
    properties:
      manager:
        type: string
        description: Manager is an identifier of the workflow managing these fields.
      operation:
        type: string
        description: |-
          Operation is the type of operation which lead to this ManagedFieldsEntry being created.
          The only valid values for this field are 'Apply' and 'Update'.
      apiVersion:
        type: string
        description: |-
          APIVersion defines the version of this resource that this field set
          applies to. The format is "group/version" just like the top-level
          APIVersion field. It is necessary to track the version of a field
          set because it cannot be automatically converted.
      time:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        title: |-
          Time is the timestamp of when the ManagedFields entry was added. The
          timestamp will also be updated if a field is added, the manager
          changes any of the owned fields value or removes a field. The
          timestamp does not update when a field is removed from the entry
          because another manager took it over.
          +optional
      fieldsType:
        type: string
        title: |-
          FieldsType is the discriminator for the different fields format and version.
          There is currently only one possible value: "FieldsV1"
      fieldsV1:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1'
        title: |-
          FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
          +optional
      subresource:
        type: string
        description: |-
          Subresource is the name of the subresource used to update that object, or
          empty string if the object was updated through the main resource. The
          value of this field is used to distinguish between managers, even if they
          share the same name. For example, a status update will be distinct from a
          regular update using the same manager name.
          Note that the APIVersion field is not related to the Subresource field and
          it always corresponds to the version of the main resource.
    description: |-
      ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource
      that the fieldset applies to.
  k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta:
    type: object
    properties:
      name:
        type: string
        title: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
          +optional
      generateName:
        type: string
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will return a 409.

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          +optional
      namespace:
        type: string
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
          +optional
      selfLink:
        type: string
        title: |-
          Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
          +optional
      uid:
        type: string
        description: |-
          UID is the unique in time and space value for this object. It is typically generated by
          the server on successful creation of a resource and is not allowed to change on PUT
          operations.

          Populated by the system.
          Read-only.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
          +optional
      resourceVersion:
        type: string
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
      generation:
        type: string
        format: int64
        title: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
      creationTimestamp:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        description: |-
          CreationTimestamp is a timestamp representing the server time when this object was
          created. It is not guaranteed to be set in happens-before order across separate operations.
          Clients may not set this value. It is represented in RFC3339 form and is in UTC.

          Populated by the system.
          Read-only.
          Null for lists.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
      deletionTimestamp:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        description: |-
          DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This
          field is set by the server when a graceful deletion is requested by the user, and is not
          directly settable by a client. The resource is expected to be deleted (no longer visible
          from resource lists, and not reachable by name) after the time in this field, once the
          finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.
          Once the deletionTimestamp is set, this value may not be unset or be set further into the
          future, although it may be shortened or the resource may be deleted prior to this time.
          For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react
          by sending a graceful termination signal to the containers in the pod. After that 30 seconds,
          the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
          remove the pod from the API. In the presence of network partitions, this object may still
          exist after this timestamp, until an administrator or automated process can determine the
          resource is fully terminated.
          If not set, graceful deletion of the object has not been requested.

          Populated by the system when a graceful deletion is requested.
          Read-only.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
      deletionGracePeriodSeconds:
        type: string
        format: int64
        title: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
      labels:
        type: object
        additionalProperties:
          type: string
        title: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
          +optional
      annotations:
        type: object
        additionalProperties:
          type: string
        title: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
          +optional
      ownerReferences:
        type: array
        items:
          $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference'
        title: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
      finalizers:
        type: array
        items:
          type: string
        title: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced
          because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation
          in which the component responsible for the first finalizer in the list is
          waiting for a signal (field value, external system, or other) produced by a
          component responsible for a finalizer later in the list, resulting in a deadlock.
          Without enforced ordering finalizers are free to order amongst themselves and
          are not vulnerable to ordering changes in the list.
          +optional
          +patchStrategy=merge
      managedFields:
        type: array
        items:
          $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry'
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          +optional
    description: |-
      ObjectMeta is metadata that all persisted resources must have, which includes all objects
      users must create.
  k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference:
    type: object
    properties:
      apiVersion:
        type: string
        description: API version of the referent.
      kind:
        type: string
        title: |-
          Kind of the referent.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
      name:
        type: string
        title: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
      uid:
        type: string
        title: |-
          UID of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
      controller:
        type: boolean
        title: |-
          If true, this reference points to the managing controller.
          +optional
      blockOwnerDeletion:
        type: boolean
        title: |-
          If true, AND if the owner has the "foregroundDeletion" finalizer, then
          the owner cannot be deleted from the key-value store until this
          reference is removed.
          See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
          for how the garbage collector interacts with this field and enforces the foreground deletion.
          Defaults to false.
          To set this field, a user needs "delete" permission of the owner,
          otherwise 422 (Unprocessable Entity) will be returned.
          +optional
    title: |-
      OwnerReference contains enough information to let you identify an owning
      object. An owning object must be in the same namespace as the dependent, or
      be cluster-scoped, so there is no namespace field.
      +structType=atomic
  k8s.io.apimachinery.pkg.apis.meta.v1.Time:
    type: object
    properties:
      seconds:
        type: string
        format: int64
        description: |-
          Represents seconds of UTC time since Unix epoch
          1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
          9999-12-31T23:59:59Z inclusive.
      nanos:
        type: integer
        format: int32
        description: |-
          Non-negative fractions of a second at nanosecond resolution. Negative
          second values with fractions must still have non-negative nanos values
          that count forward in time. Must be from 0 to 999,999,999
          inclusive. This field may be limited in precision depending on context.
    description: |-
      Time is a wrapper around time.Time which supports correct
      marshaling to YAML and JSON.  Wrappers are provided for many
      of the factory methods that the time package offers.

      +protobuf.options.marshal=false
      +protobuf.as=Timestamp
      +protobuf.options.(gogoproto.goproto_stringer)=false
  k8s.io.apimachinery.pkg.util.intstr.IntOrString:
    type: object
    properties:
      type:
        type: string
        format: int64
      intVal:
        type: integer
        format: int32
      strVal:
        type: string
    description: |-
      +protobuf=true
      +protobuf.options.(gogoproto.goproto_stringer)=false
      +k8s:openapi-gen=true
    title: |-
      IntOrString is a type that can hold an int32 or a string.  When used in
      JSON or YAML marshalling and unmarshalling, it produces or consumes the
      inner type.  This allows you to have, for example, a JSON field that can
      accept a name or number.
      TODO: Rename to Int32OrString
  rollout.AbortRolloutRequest:
    type: object
    properties:
      name:
        type: string
      namespace:
        type: string
  rollout.AnalysisRunInfo:
    type: object
    properties:
      objectMeta:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
      icon:
        type: string
        description: field type from 161 -170 will be deprecated in future.
      revision:
        type: string
        format: int64
      status:
        type: string
      successful:
        type: integer
        format: int32
      failed:
        type: integer
        format: int32
      inconclusive:
        type: integer
        format: int32
      error:
        type: integer
        format: int32
      jobs:
        type: array
        items:
          $ref: '#/definitions/rollout.JobInfo'
      nonJobInfo:
        type: array
        items:
          $ref: '#/definitions/rollout.NonJobInfo'
      metrics:
        type: array
        items:
          $ref: '#/definitions/rollout.Metrics'
      specAndStatus:
        $ref: '#/definitions/rollout.AnalysisRunSpecAndStatus'
        description: The new API changes should use SpecAndStatus field type.
  rollout.AnalysisRunSpecAndStatus:
    type: object
    properties:
      spec:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AnalysisRunSpec'
      status:
        $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.AnalysisRunStatus'
  rollout.ContainerInfo:
    type: object
    properties:
      name:
        type: string
      image:
        type: string
  rollout.ExperimentInfo:
    type: object
    properties:
      objectMeta:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
      icon:
        type: string
      revision:
        type: string
        format: int64
      status:
        type: string
      message:
        type: string
      replicaSets:
        type: array
        items:
          $ref: '#/definitions/rollout.ReplicaSetInfo'
      analysisRuns:
        type: array
        items:
          $ref: '#/definitions/rollout.AnalysisRunInfo'
  rollout.JobInfo:
    type: object
    properties:
      objectMeta:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
      status:
        type: string
      icon:
        type: string
      metricName:
        type: string
      startedAt:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
  rollout.Metrics:
    type: object
    properties:
      name:
        type: string
      successCondition:
        type: string
      count:
        type: integer
        format: int32
      inconclusiveLimit:
        type: integer
        format: int32
      failureLimit:
        type: integer
        format: int32
  rollout.NamespaceInfo:
    type: object
    properties:
      namespace:
        type: string
      availableNamespaces:
        type: array
        items:
          type: string
  rollout.NonJobInfo:
    type: object
    properties:
      value:
        type: string
      status:
        type: string
      metricName:
        type: string
      startedAt:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
  rollout.PodInfo:
    type: object
    properties:
      objectMeta:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
      status:
        type: string
      icon:
        type: string
      ready:
        type: string
      restarts:
        type: integer
        format: int32
  rollout.PromoteRolloutRequest:
    type: object
    properties:
      name:
        type: string
      namespace:
        type: string
      full:
        type: boolean
  rollout.ReplicaSetInfo:
    type: object
    properties:
      objectMeta:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
      status:
        type: string
      icon:
        type: string
      revision:
        type: string
        format: int64
      stable:
        type: boolean
      canary:
        type: boolean
      active:
        type: boolean
      preview:
        type: boolean
      replicas:
        type: integer
        format: int32
      available:
        type: integer
        format: int32
      template:
        type: string
      scaleDownDeadline:
        type: string
      images:
        type: array
        items:
          type: string
      pods:
        type: array
        items:
          $ref: '#/definitions/rollout.PodInfo'
      ping:
        type: boolean
      pong:
        type: boolean
      initContainerImages:
        type: array
        items:
          type: string
  rollout.RestartRolloutRequest:
    type: object
    properties:
      name:
        type: string
      namespace:
        type: string
  rollout.RetryRolloutRequest:
    type: object
    properties:
      name:
        type: string
      namespace:
        type: string
  rollout.RolloutInfo:
    type: object
    properties:
      objectMeta:
        $ref: '#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
      status:
        type: string
      message:
        type: string
      icon:
        type: string
      strategy:
        type: string
      step:
        type: string
      setWeight:
        type: string
      actualWeight:
        type: string
      ready:
        type: integer
        format: int32
      current:
        type: integer
        format: int32
      desired:
        type: integer
        format: int32
      updated:
        type: integer
        format: int32
      available:
        type: integer
        format: int32
      restartedAt:
        type: string
      generation:
        type: string
      replicaSets:
        type: array
        items:
          $ref: '#/definitions/rollout.ReplicaSetInfo'
      experiments:
        type: array
        items:
          $ref: '#/definitions/rollout.ExperimentInfo'
      analysisRuns:
        type: array
        items:
          $ref: '#/definitions/rollout.AnalysisRunInfo'
      containers:
        type: array
        items:
          $ref: '#/definitions/rollout.ContainerInfo'
      steps:
        type: array
        items:
          $ref: '#/definitions/github.com.argoproj.argo_rollouts.pkg.apis.rollouts.v1alpha1.CanaryStep'
      initContainers:
        type: array
        items:
          $ref: '#/definitions/rollout.ContainerInfo'
  rollout.RolloutInfoList:
    type: object
    properties:
      rollouts:
        type: array
        items:
          $ref: '#/definitions/rollout.RolloutInfo'
  rollout.RolloutWatchEvent:
    type: object
    properties:
      type:
        type: string
      rolloutInfo:
        $ref: '#/definitions/rollout.RolloutInfo'
  rollout.SetImageRequest:
    type: object
    properties:
      rollout:
        type: string
      container:
        type: string
      image:
        type: string
      tag:
        type: string
      namespace:
        type: string
  rollout.UndoRolloutRequest:
    type: object
    properties:
      rollout:
        type: string
      revision:
        type: string
        format: int64
      namespace:
        type: string
  rollout.VersionInfo:
    type: object
    properties:
      rolloutsVersion:
        type: string
  io.k8s.apimachinery.pkg.util.intstr.IntOrString:
    oneOf:
      - type: string
      - type: integer
  io.k8s.apimachinery.pkg.api.resource.Quantity:
    oneOf:
      - type: string
      - type: number
