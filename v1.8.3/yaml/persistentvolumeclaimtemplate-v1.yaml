type: object
properties:
  metadata:
    type:
      - object
      - "null"
    properties:
      name:
        type:
          - string
          - "null"
        title: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
          +optional
      generateName:
        type:
          - string
          - "null"
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will return a 409.

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          +optional
      namespace:
        type:
          - string
          - "null"
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
          +optional
      selfLink:
        type:
          - string
          - "null"
        title: |-
          Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
          +optional
      uid:
        type:
          - string
          - "null"
        description: |-
          UID is the unique in time and space value for this object. It is typically generated by
          the server on successful creation of a resource and is not allowed to change on PUT
          operations.

          Populated by the system.
          Read-only.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
          +optional
      resourceVersion:
        type:
          - string
          - "null"
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
      generation:
        type:
          - string
          - "null"
        format: int64
        title: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
      creationTimestamp:
        type:
          - object
          - "null"
        properties:
          seconds:
            type:
              - string
              - "null"
            format: int64
            description: |-
              Represents seconds of UTC time since Unix epoch
              1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
              9999-12-31T23:59:59Z inclusive.
          nanos:
            type:
              - integer
              - "null"
            format: int32
            description: |-
              Non-negative fractions of a second at nanosecond resolution. Negative
              second values with fractions must still have non-negative nanos values
              that count forward in time. Must be from 0 to 999,999,999
              inclusive. This field may be limited in precision depending on context.
        description: |-
          Time is a wrapper around time.Time which supports correct
          marshaling to YAML and JSON.  Wrappers are provided for many
          of the factory methods that the time package offers.

          +protobuf.options.marshal=false
          +protobuf.as=Timestamp
          +protobuf.options.(gogoproto.goproto_stringer)=false
      deletionTimestamp:
        type:
          - object
          - "null"
        properties:
          seconds:
            type:
              - string
              - "null"
            format: int64
            description: |-
              Represents seconds of UTC time since Unix epoch
              1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
              9999-12-31T23:59:59Z inclusive.
          nanos:
            type:
              - integer
              - "null"
            format: int32
            description: |-
              Non-negative fractions of a second at nanosecond resolution. Negative
              second values with fractions must still have non-negative nanos values
              that count forward in time. Must be from 0 to 999,999,999
              inclusive. This field may be limited in precision depending on context.
        description: |-
          Time is a wrapper around time.Time which supports correct
          marshaling to YAML and JSON.  Wrappers are provided for many
          of the factory methods that the time package offers.

          +protobuf.options.marshal=false
          +protobuf.as=Timestamp
          +protobuf.options.(gogoproto.goproto_stringer)=false
      deletionGracePeriodSeconds:
        type:
          - string
          - "null"
        format: int64
        title: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
      labels:
        type:
          - object
          - "null"
        additionalProperties:
          type:
            - string
            - "null"
        title: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
          +optional
      annotations:
        type:
          - object
          - "null"
        additionalProperties:
          type:
            - string
            - "null"
        title: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
          +optional
      ownerReferences:
        type:
          - array
          - "null"
        items:
          type:
            - object
            - "null"
          properties:
            apiVersion:
              type:
                - string
                - "null"
              description: API version of the referent.
            kind:
              type:
                - string
                - "null"
              title: |-
                Kind of the referent.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            name:
              type:
                - string
                - "null"
              title: |-
                Name of the referent.
                More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
            uid:
              type:
                - string
                - "null"
              title: |-
                UID of the referent.
                More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
            controller:
              type:
                - boolean
                - "null"
              title: |-
                If true, this reference points to the managing controller.
                +optional
            blockOwnerDeletion:
              type:
                - boolean
                - "null"
              title: |-
                If true, AND if the owner has the "foregroundDeletion" finalizer, then
                the owner cannot be deleted from the key-value store until this
                reference is removed.
                See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
                for how the garbage collector interacts with this field and enforces the foreground deletion.
                Defaults to false.
                To set this field, a user needs "delete" permission of the owner,
                otherwise 422 (Unprocessable Entity) will be returned.
                +optional
          title: |-
            OwnerReference contains enough information to let you identify an owning
            object. An owning object must be in the same namespace as the dependent, or
            be cluster-scoped, so there is no namespace field.
            +structType=atomic
        title: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
      finalizers:
        type:
          - array
          - "null"
        items:
          type:
            - string
            - "null"
        title: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced
          because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation
          in which the component responsible for the first finalizer in the list is
          waiting for a signal (field value, external system, or other) produced by a
          component responsible for a finalizer later in the list, resulting in a deadlock.
          Without enforced ordering finalizers are free to order amongst themselves and
          are not vulnerable to ordering changes in the list.
          +optional
          +patchStrategy=merge
      managedFields:
        type:
          - array
          - "null"
        items:
          type:
            - object
            - "null"
          properties:
            manager:
              type:
                - string
                - "null"
              description: Manager is an identifier of the workflow managing these fields.
            operation:
              type:
                - string
                - "null"
              description: |-
                Operation is the type of operation which lead to this ManagedFieldsEntry being created.
                The only valid values for this field are 'Apply' and 'Update'.
            apiVersion:
              type:
                - string
                - "null"
              description: |-
                APIVersion defines the version of this resource that this field set
                applies to. The format is "group/version" just like the top-level
                APIVersion field. It is necessary to track the version of a field
                set because it cannot be automatically converted.
            time:
              type:
                - object
                - "null"
              properties:
                seconds:
                  type:
                    - string
                    - "null"
                  format: int64
                  description: |-
                    Represents seconds of UTC time since Unix epoch
                    1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
                    9999-12-31T23:59:59Z inclusive.
                nanos:
                  type:
                    - integer
                    - "null"
                  format: int32
                  description: |-
                    Non-negative fractions of a second at nanosecond resolution. Negative
                    second values with fractions must still have non-negative nanos values
                    that count forward in time. Must be from 0 to 999,999,999
                    inclusive. This field may be limited in precision depending on context.
              description: |-
                Time is a wrapper around time.Time which supports correct
                marshaling to YAML and JSON.  Wrappers are provided for many
                of the factory methods that the time package offers.

                +protobuf.options.marshal=false
                +protobuf.as=Timestamp
                +protobuf.options.(gogoproto.goproto_stringer)=false
            fieldsType:
              type:
                - string
                - "null"
              title: |-
                FieldsType is the discriminator for the different fields format and version.
                There is currently only one possible value: "FieldsV1"
            fieldsV1:
              type:
                - object
                - "null"
              properties:
                Raw:
                  type:
                    - string
                    - "null"
                  format: byte
                  description: Raw is the underlying serialization of this object.
              description: |-
                FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.

                Each key is either a '.' representing the field itself, and will always map to an empty set,
                or a string representing a sub-field or item. The string will follow one of these four formats:
                'f:<name>', where <name> is the name of a field in a struct, or key in a map
                'v:<value>', where <value> is the exact json formatted value of a list item
                'i:<index>', where <index> is position of a item in a list
                'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values
                If a key maps to an empty Fields value, the field that key represents is part of the set.

                The exact format is defined in sigs.k8s.io/structured-merge-diff
                +protobuf.options.(gogoproto.goproto_stringer)=false
            subresource:
              type:
                - string
                - "null"
              description: |-
                Subresource is the name of the subresource used to update that object, or
                empty string if the object was updated through the main resource. The
                value of this field is used to distinguish between managers, even if they
                share the same name. For example, a status update will be distinct from a
                regular update using the same manager name.
                Note that the APIVersion field is not related to the Subresource field and
                it always corresponds to the version of the main resource.
          description: |-
            ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource
            that the fieldset applies to.
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          +optional
    description: |-
      ObjectMeta is metadata that all persisted resources must have, which includes all objects
      users must create.
  spec:
    type:
      - object
      - "null"
    properties:
      accessModes:
        type:
          - array
          - "null"
        items:
          type:
            - string
            - "null"
        title: |-
          accessModes contains the desired access modes the volume should have.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
          +optional
      selector:
        type:
          - object
          - "null"
        properties:
          matchLabels:
            type:
              - object
              - "null"
            additionalProperties:
              type:
                - string
                - "null"
            title: |-
              matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
              map is equivalent to an element of matchExpressions, whose key field is "key", the
              operator is "In", and the values array contains only "value". The requirements are ANDed.
              +optional
          matchExpressions:
            type:
              - array
              - "null"
            items:
              type:
                - object
                - "null"
              properties:
                key:
                  type:
                    - string
                    - "null"
                  description: key is the label key that the selector applies to.
                operator:
                  type:
                    - string
                    - "null"
                  description: |-
                    operator represents a key's relationship to a set of values.
                    Valid operators are In, NotIn, Exists and DoesNotExist.
                values:
                  type:
                    - array
                    - "null"
                  items:
                    type:
                      - string
                      - "null"
                  title: |-
                    values is an array of string values. If the operator is In or NotIn,
                    the values array must be non-empty. If the operator is Exists or DoesNotExist,
                    the values array must be empty. This array is replaced during a strategic
                    merge patch.
                    +optional
              description: |-
                A label selector requirement is a selector that contains values, a key, and an operator that
                relates the key and values.
            title: |-
              matchExpressions is a list of label selector requirements. The requirements are ANDed.
              +optional
        title: |-
          A label selector is a label query over a set of resources. The result of matchLabels and
          matchExpressions are ANDed. An empty label selector matches all objects. A null
          label selector matches no objects.
          +structType=atomic
      resources:
        type:
          - object
          - "null"
        properties:
          limits:
            type:
              - object
              - "null"
            additionalProperties:
              type:
                - object
                - "null"
              properties:
                string:
                  type:
                    - string
                    - "null"
              description: |-
                Quantity is a fixed-point representation of a number.
                It provides convenient marshaling/unmarshaling in JSON and YAML,
                in addition to String() and AsInt64() accessors.

                The serialization format is:

                ```
                <quantity>        ::= <signedNumber><suffix>

                	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)

                <digit>           ::= 0 | 1 | ... | 9
                <digits>          ::= <digit> | <digit><digits>
                <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits>
                <sign>            ::= "+" | "-"
                <signedNumber>    ::= <number> | <sign><number>
                <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI>
                <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei

                	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)

                <decimalSI>       ::= m | "" | k | M | G | T | P | E

                	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)

                <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>
                ```

                No matter which of the three exponent forms is used, no quantity may represent
                a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal
                places. Numbers larger or more precise will be capped or rounded up.
                (E.g.: 0.1m will rounded up to 1m.)
                This may be extended in the future if we require larger or smaller quantities.

                When a Quantity is parsed from a string, it will remember the type of suffix
                it had, and will use the same type again when it is serialized.

                Before serializing, Quantity will be put in "canonical form".
                This means that Exponent/suffix will be adjusted up or down (with a
                corresponding increase or decrease in Mantissa) such that:

                - No precision is lost
                - No fractional digits will be emitted
                - The exponent (or suffix) is as large as possible.

                The sign will be omitted unless the number is negative.

                Examples:

                - 1.5 will be serialized as "1500m"
                - 1.5Gi will be serialized as "1536Mi"

                Note that the quantity will NEVER be internally represented by a
                floating point number. That is the whole point of this exercise.

                Non-canonical values will still parse as long as they are well formed,
                but will be re-emitted in their canonical form. (So always use canonical
                form, or don't diff.)

                This format is intended to make it difficult to use these numbers without
                writing some sort of special handling code in the hopes that that will
                cause implementors to also use a fixed point implementation.

                +protobuf=true
                +protobuf.embed=string
                +protobuf.options.marshal=false
                +protobuf.options.(gogoproto.goproto_stringer)=false
                +k8s:deepcopy-gen=true
                +k8s:openapi-gen=true
            title: |-
              Limits describes the maximum amount of compute resources allowed.
              More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
              +optional
          requests:
            type:
              - object
              - "null"
            additionalProperties:
              type:
                - object
                - "null"
              properties:
                string:
                  type:
                    - string
                    - "null"
              description: |-
                Quantity is a fixed-point representation of a number.
                It provides convenient marshaling/unmarshaling in JSON and YAML,
                in addition to String() and AsInt64() accessors.

                The serialization format is:

                ```
                <quantity>        ::= <signedNumber><suffix>

                	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)

                <digit>           ::= 0 | 1 | ... | 9
                <digits>          ::= <digit> | <digit><digits>
                <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits>
                <sign>            ::= "+" | "-"
                <signedNumber>    ::= <number> | <sign><number>
                <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI>
                <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei

                	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)

                <decimalSI>       ::= m | "" | k | M | G | T | P | E

                	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)

                <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>
                ```

                No matter which of the three exponent forms is used, no quantity may represent
                a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal
                places. Numbers larger or more precise will be capped or rounded up.
                (E.g.: 0.1m will rounded up to 1m.)
                This may be extended in the future if we require larger or smaller quantities.

                When a Quantity is parsed from a string, it will remember the type of suffix
                it had, and will use the same type again when it is serialized.

                Before serializing, Quantity will be put in "canonical form".
                This means that Exponent/suffix will be adjusted up or down (with a
                corresponding increase or decrease in Mantissa) such that:

                - No precision is lost
                - No fractional digits will be emitted
                - The exponent (or suffix) is as large as possible.

                The sign will be omitted unless the number is negative.

                Examples:

                - 1.5 will be serialized as "1500m"
                - 1.5Gi will be serialized as "1536Mi"

                Note that the quantity will NEVER be internally represented by a
                floating point number. That is the whole point of this exercise.

                Non-canonical values will still parse as long as they are well formed,
                but will be re-emitted in their canonical form. (So always use canonical
                form, or don't diff.)

                This format is intended to make it difficult to use these numbers without
                writing some sort of special handling code in the hopes that that will
                cause implementors to also use a fixed point implementation.

                +protobuf=true
                +protobuf.embed=string
                +protobuf.options.marshal=false
                +protobuf.options.(gogoproto.goproto_stringer)=false
                +k8s:deepcopy-gen=true
                +k8s:openapi-gen=true
            title: |-
              Requests describes the minimum amount of compute resources required.
              If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
              otherwise to an implementation-defined value. Requests cannot exceed Limits.
              More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
              +optional
        description: VolumeResourceRequirements describes the storage resource requirements for a volume.
      volumeName:
        type:
          - string
          - "null"
        title: |-
          volumeName is the binding reference to the PersistentVolume backing this claim.
          +optional
      storageClassName:
        type:
          - string
          - "null"
        title: |-
          storageClassName is the name of the StorageClass required by the claim.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
          +optional
      volumeMode:
        type:
          - string
          - "null"
        title: |-
          volumeMode defines what type of volume is required by the claim.
          Value of Filesystem is implied when not included in claim spec.
          +optional
      dataSource:
        type:
          - object
          - "null"
        properties:
          apiGroup:
            type:
              - string
              - "null"
            title: |-
              APIGroup is the group for the resource being referenced.
              If APIGroup is not specified, the specified Kind must be in the core API group.
              For any other third-party types, APIGroup is required.
              +optional
          kind:
            type:
              - string
              - "null"
            title: Kind is the type of resource being referenced
          name:
            type:
              - string
              - "null"
            title: Name is the name of resource being referenced
        title: |-
          TypedLocalObjectReference contains enough information to let you locate the
          typed referenced object inside the same namespace.
          +structType=atomic
      dataSourceRef:
        type:
          - object
          - "null"
        properties:
          apiGroup:
            type:
              - string
              - "null"
            title: |-
              APIGroup is the group for the resource being referenced.
              If APIGroup is not specified, the specified Kind must be in the core API group.
              For any other third-party types, APIGroup is required.
              +optional
          kind:
            type:
              - string
              - "null"
            title: Kind is the type of resource being referenced
          name:
            type:
              - string
              - "null"
            title: Name is the name of resource being referenced
          namespace:
            type:
              - string
              - "null"
            title: |-
              Namespace is the namespace of resource being referenced
              Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
              (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
              +featureGate=CrossNamespaceVolumeDataSource
              +optional
      volumeAttributesClassName:
        type:
          - string
          - "null"
        title: |-
          volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
          If specified, the CSI driver will create or update the volume with the attributes defined
          in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
          it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
          will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
          If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
          will be set by the persistentvolume controller if it exists.
          If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
          set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
          exists.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass
          (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
          +featureGate=VolumeAttributesClass
          +optional
    title: |-
      PersistentVolumeClaimSpec describes the common attributes of storage devices
      and allows a Source for provider-specific attributes
description: |-
  PersistentVolumeClaimTemplate is used to produce
  PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
$schema: http://json-schema.org/schema#
